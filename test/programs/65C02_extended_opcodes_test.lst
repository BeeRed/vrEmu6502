AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
------------------------------------------------ 65C02_extended_opcodes_test.a65c ------------------------------------------------

2883 lines read, no errors in pass 1.
                        ;
                        ; 6 5 C 0 2   E X T E N D E D   O P C O D E S   T E S T
                        ;
                        ; Copyright (C) 2013-2017  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all additional 65C02 opcodes, addressing
                        ; modes and functionality not available in the NMOS version of the 6502.
                        ; The 6502_functional_test is a prerequisite to this test.
                        ; NMI, IRQ, STP & WAI are covered in the 6502_interrupt_test.
                        ; 
                        ; version 04-dec-2017
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -x -h0
                        ;                         |  |  |   |  |  no page headers in listing
                        ;                         |  |  |   |  65C02 extensions
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original 65C02 only!
                        ; Decimal ops will only be tested with valid BCD operands and the V flag will
                        ; be ignored as it is absolutely useless in decimal mode.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   19-jul-2013  1st version distributed for testing
                        ;   23-jul-2013  fixed BRA out of range due to larger trap macros
                        ;                added RAM integrity check
                        ;   16-aug-2013  added error report to standard output option
                        ;   23-aug-2015  change revoked
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;   28-aug-2015  fixed decimal adc/sbc immediate only testing carry
                        ;   09-feb-2017  fixed RMB/SMB tested when they shouldn't be tested
                        ;   04-dec-2017  fixed BRK not tested for actually going through the IRQ vector
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;                added skip override to undefined opcode as NOP test
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended.
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $4e (78) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $63 (99) consecutive Bytes required
                        ; + 12 Bytes at data_segment + $f9 (JMP indirect page cross test)
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 10kB of consecutive space required
                        ;                                   add 1 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;added WDC only opcodes WAI & STP (0=test as NOPs, >0=no test)
0001 =                  wdc_op = 1
                        
                        ;added Rockwell & WDC opcodes BBR, BBS, RMB & SMB
                        ;(0=test as NOPs, 1=full test, >1=no test) 
0001 =                  rkwl_wdc_op = 1
                        
                        ;skip testing all undefined opcodes override
                        ;0=test as NOP, >0=skip
0001 =                  skip_nop = 1
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                                noopt       ;do not take shortcuts
                                
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                        		db $db
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_as      macro       ;testing result in accu & flags, save accu
                                    pha
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    pla
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                    ldx #11         ;reset modifiable RAM
                        ccs1\?      sta jxi_tab,x   ;JMP indirect page cross area
                                    dex
                                    bpl ccs1\?
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                                    
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (-V in decimal mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0017 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0018 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 : 1002             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0026 : 1102                     dw  abs1+1
0028 : 1202                     dw  abs1+2
002a : 1302                     dw  abs1+3
002c : 1402                     dw  abs7f
002e : 1801             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0030 : 0502             indt    dw  abst            ;indirect pointer to store area in absolute memory
0032 : 0602                     dw  abst+1
0034 : 0702                     dw  abst+2
0036 : 0802                     dw  abst+3
0038 : 0d01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003a : 4702             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003c : 4802                     dw  absAN+1
003e : 4902                     dw  absAN+2
0040 : 4a02                     dw  absAN+3
0042 : 4b02             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0044 : 4c02                     dw  absEO+1
0046 : 4d02                     dw  absEO+2
0048 : 4e02                     dw  absEO+3
004a : 4302             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004c : 4402                     dw  absOR+1
004e : 4502                     dw  absOR+2
0050 : 4602                     dw  absOR+3
                        ;add/subtract indirect pointers
0052 : 0502             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0054 : 0602             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0056 : 0601             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0058 : 0701             sbiy2   dw  sba2-$ff
005a :                  zp_bss_end
                            
0200 =                          org data_segment
0200 : 0000             pg_x    ds  2               ;high JMP indirect address for page cross bug
0202 : 00               test_case   ds  1           ;current test number
0203 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0205 :                  abst                        ;5 bytes store/modify test area
0205 : 00               ada2    ds  1               ;operand 2
0206 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0207 : 000000                   ds  3               ;fill remaining bytes
020a :                  data_bss
                            if load_data_direct = 1
020a : 6900             ex_adci adc #0              ;execute immediate opcodes
020c : 60                       rts
020d : e900             ex_sbci sbc #0              ;execute immediate opcodes
020f : 60                       rts
                            else
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
0210 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0214 : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
0215 : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0219 :                  rASL                        ;expected result ASL & ROL -carry  
0219 : 86048200         rROL    db  $86,$04,$82,0   ; "
021d : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0221 :                  rLSR                        ;expected result LSR & ROR -carry
0221 : 61412000         rROR    db  $61,$41,$20,0   ; "
0225 : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0229 :                  fASL                        ;expected flags for shifts
0229 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
022d : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
0231 :                  fLSR
0231 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
0235 : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0239 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
023e : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
0243 : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
0247 : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
024b : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
024f : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
0253 : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
0257 : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
025b : 00ff7f80         absrlo  db  0,$ff,$7f,$80
025f : 02800080         absflo  db  fz,fn,0,fn
0263 :                  data_bss_end
                        ;define area for page crossing JMP (abs) & JMP (abs,x) test
02f9 =                  jxi_tab equ data_segment + $100 - 7     ;JMP (jxi_tab,x) x=6
02fd =                  ji_tab  equ data_segment + $100 - 3     ;JMP (ji_tab+2)
0300 =                  jxp_tab equ data_segment + $100         ;JMP (jxp_tab-255) x=255
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0202                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                                ldx #11         ;reset modifiable RAM
                        gcs1    sta jxi_tab,x   ;JMP indirect page cross area
                                dex
                                bpl gcs1
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0409 : ad0202          >            lda test_case   ;previous test
040c : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
040e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
0410 : a901            >            lda #test_num   ;*** next tests' number
0412 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing stack operations PHX PHY PLX PLY
0415 : a999                     lda #$99        ;protect a
0417 : a2ff                     ldx #$ff        ;initialize stack
0419 : 9a                       txs
041a : a255                     ldx #$55
041c : da                       phx
041d : a2aa                     ldx #$aa
041f : da                       phx
0420 : ecfe01                   cpx $1fe        ;on stack ?
                                trap_ne
0423 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0425 : ba                       tsx
0426 : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
0428 : d0fe            >        bne *           ;failed not equal (non zero)
                        
042a : 7a                       ply
042b : c0aa                     cpy #$aa        ;successful retreived from stack?
                                trap_ne
042d : d0fe            >        bne *           ;failed not equal (non zero)
                        
042f : 7a                       ply
0430 : c055                     cpy #$55
                                trap_ne
0432 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0434 : ccff01                   cpy $1ff        ;remains on stack?
                                trap_ne
0437 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0439 : ba                       tsx
043a : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
043c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
043e : a0a5                     ldy #$a5
0440 : 5a                       phy
0441 : a05a                     ldy #$5a
0443 : 5a                       phy
0444 : ccfe01                   cpy $1fe        ;on stack ?
                                trap_ne
0447 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0449 : ba                       tsx
044a : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
044c : d0fe            >        bne *           ;failed not equal (non zero)
                        
044e : fa                       plx
044f : e05a                     cpx #$5a        ;successful retreived from stack?
                                trap_ne
0451 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0453 : fa                       plx
0454 : e0a5                     cpx #$a5
                                trap_ne
0456 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0458 : ecff01                   cpx $1ff        ;remains on stack?
                                trap_ne
045b : d0fe            >        bne *           ;failed not equal (non zero)
                        
045d : ba                       tsx
045e : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
0460 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0462 : c999                     cmp #$99        ;unchanged?
                                trap_ne
0464 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test            
0466 : ad0202          >            lda test_case   ;previous test
0469 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
046b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
046d : a902            >            lda #test_num   ;*** next tests' number
046f : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; test PHX does not alter flags or X but PLX does
0472 : a0aa                     ldy #$aa        ;protect y
                                set_x 1,$ff     ;push
                       >            load_flag $ff     
0474 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
0476 : 48              >            pha         ;use stack to load status
0477 : a201            >            ldx #1     ;precharge index x
0479 : 28              >            plp
                        
047a : da                       phx
                                tst_x 1,$ff
047b : 08              >            php         ;save flags
047c : e001            >            cpx #1     ;test result
                       >            trap_ne
047e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0480 : 68              >            pla         ;load status
0481 : 48              >            pha
                       >            cmp_flag $ff
0482 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0484 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0486 : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
0487 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0489 : 48              >            pha         ;use stack to load status
048a : a200            >            ldx #0     ;precharge index x
048c : 28              >            plp
                        
048d : da                       phx
                                tst_x 0,0
048e : 08              >            php         ;save flags
048f : e000            >            cpx #0     ;test result
                       >            trap_ne
0491 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0493 : 68              >            pla         ;load status
0494 : 48              >            pha
                       >            cmp_flag 0
0495 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0497 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0499 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
049a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
049c : 48              >            pha         ;use stack to load status
049d : a2ff            >            ldx #$ff     ;precharge index x
049f : 28              >            plp
                        
04a0 : da                       phx
                                tst_x $ff,$ff
04a1 : 08              >            php         ;save flags
04a2 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
04a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04a6 : 68              >            pla         ;load status
04a7 : 48              >            pha
                       >            cmp_flag $ff
04a8 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
04aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04ac : 28              >            plp         ;restore status
                        
                                set_x 1,0
                       >            load_flag 0
04ad : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
04af : 48              >            pha         ;use stack to load status
04b0 : a201            >            ldx #1     ;precharge index x
04b2 : 28              >            plp
                        
04b3 : da                       phx
                                tst_x 1,0
04b4 : 08              >            php         ;save flags
04b5 : e001            >            cpx #1     ;test result
                       >            trap_ne
04b7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04b9 : 68              >            pla         ;load status
04ba : 48              >            pha
                       >            cmp_flag 0
04bb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
04bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04bf : 28              >            plp         ;restore status
                        
                                set_x 0,$ff
                       >            load_flag $ff
04c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
04c2 : 48              >            pha         ;use stack to load status
04c3 : a200            >            ldx #0     ;precharge index x
04c5 : 28              >            plp
                        
04c6 : da                       phx
                                tst_x 0,$ff
04c7 : 08              >            php         ;save flags
04c8 : e000            >            cpx #0     ;test result
                       >            trap_ne
04ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04cc : 68              >            pla         ;load status
04cd : 48              >            pha
                       >            cmp_flag $ff
04ce : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
04d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04d2 : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
04d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
04d5 : 48              >            pha         ;use stack to load status
04d6 : a2ff            >            ldx #$ff     ;precharge index x
04d8 : 28              >            plp
                        
04d9 : da                       phx
                                tst_x $ff,0
04da : 08              >            php         ;save flags
04db : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
04dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04df : 68              >            pla         ;load status
04e0 : 48              >            pha
                       >            cmp_flag 0
04e1 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
04e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04e5 : 28              >            plp         ;restore status
                        
                                set_x 0,$ff     ;pull
                       >            load_flag $ff     
04e6 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
04e8 : 48              >            pha         ;use stack to load status
04e9 : a200            >            ldx #0     ;precharge index x
04eb : 28              >            plp
                        
04ec : fa                       plx
                                tst_x $ff,$ff-zero
04ed : 08              >            php         ;save flags
04ee : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
04f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04f2 : 68              >            pla         ;load status
04f3 : 48              >            pha
                       >            cmp_flag $ff-zero
04f4 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
04f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
04f8 : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
04f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
04fb : 48              >            pha         ;use stack to load status
04fc : a2ff            >            ldx #$ff     ;precharge index x
04fe : 28              >            plp
                        
04ff : fa                       plx
                                tst_x 0,zero
0500 : 08              >            php         ;save flags
0501 : e000            >            cpx #0     ;test result
                       >            trap_ne
0503 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0505 : 68              >            pla         ;load status
0506 : 48              >            pha
                       >            cmp_flag zero
0507 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0509 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
050b : 28              >            plp         ;restore status
                        
                                set_x $fe,$ff
                       >            load_flag $ff
050c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
050e : 48              >            pha         ;use stack to load status
050f : a2fe            >            ldx #$fe     ;precharge index x
0511 : 28              >            plp
                        
0512 : fa                       plx
                                tst_x 1,$ff-zero-minus
0513 : 08              >            php         ;save flags
0514 : e001            >            cpx #1     ;test result
                       >            trap_ne
0516 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0518 : 68              >            pla         ;load status
0519 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
051a : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
051c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
051e : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
051f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0521 : 48              >            pha         ;use stack to load status
0522 : a200            >            ldx #0     ;precharge index x
0524 : 28              >            plp
                        
0525 : fa                       plx
                                tst_x $ff,minus
0526 : 08              >            php         ;save flags
0527 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0529 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
052b : 68              >            pla         ;load status
052c : 48              >            pha
                       >            cmp_flag minus
052d : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
052f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0531 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
0532 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0534 : 48              >            pha         ;use stack to load status
0535 : a2ff            >            ldx #$ff     ;precharge index x
0537 : 28              >            plp
                        
0538 : fa                       plx
                                tst_x 0,$ff-minus
0539 : 08              >            php         ;save flags
053a : e000            >            cpx #0     ;test result
                       >            trap_ne
053c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
053e : 68              >            pla         ;load status
053f : 48              >            pha
                       >            cmp_flag $ff-minus
0540 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0542 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0544 : 28              >            plp         ;restore status
                        
                                set_x $fe,0
                       >            load_flag 0
0545 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0547 : 48              >            pha         ;use stack to load status
0548 : a2fe            >            ldx #$fe     ;precharge index x
054a : 28              >            plp
                        
054b : fa                       plx
                                tst_x 1,0
054c : 08              >            php         ;save flags
054d : e001            >            cpx #1     ;test result
                       >            trap_ne
054f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0551 : 68              >            pla         ;load status
0552 : 48              >            pha
                       >            cmp_flag 0
0553 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0555 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0557 : 28              >            plp         ;restore status
                        
0558 : c0aa                     cpy #$aa        ;Y unchanged
                                trap_ne
055a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test            
055c : ad0202          >            lda test_case   ;previous test
055f : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0561 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
0563 : a903            >            lda #test_num   ;*** next tests' number
0565 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test PHY does not alter flags or Y but PLY does
0568 : a255                     ldx #$55        ;x & a protected
                                set_y 1,$ff     ;push
                       >            load_flag $ff     
056a : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
056c : 48              >            pha         ;use stack to load status
056d : a001            >            ldy #1     ;precharge index y
056f : 28              >            plp
                        
0570 : 5a                       phy
                                tst_y 1,$ff
0571 : 08              >            php         ;save flags
0572 : c001            >            cpy #1     ;test result
                       >            trap_ne
0574 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0576 : 68              >            pla         ;load status
0577 : 48              >            pha
                       >            cmp_flag $ff
0578 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
057a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
057c : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
057d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
057f : 48              >            pha         ;use stack to load status
0580 : a000            >            ldy #0     ;precharge index y
0582 : 28              >            plp
                        
0583 : 5a                       phy
                                tst_y 0,0
0584 : 08              >            php         ;save flags
0585 : c000            >            cpy #0     ;test result
                       >            trap_ne
0587 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0589 : 68              >            pla         ;load status
058a : 48              >            pha
                       >            cmp_flag 0
058b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
058d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
058f : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
0590 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0592 : 48              >            pha         ;use stack to load status
0593 : a0ff            >            ldy #$ff     ;precharge index y
0595 : 28              >            plp
                        
0596 : 5a                       phy
                                tst_y $ff,$ff
0597 : 08              >            php         ;save flags
0598 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
059a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
059c : 68              >            pla         ;load status
059d : 48              >            pha
                       >            cmp_flag $ff
059e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05a2 : 28              >            plp         ;restore status
                        
                                set_y 1,0
                       >            load_flag 0
05a3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
05a5 : 48              >            pha         ;use stack to load status
05a6 : a001            >            ldy #1     ;precharge index y
05a8 : 28              >            plp
                        
05a9 : 5a                       phy
                                tst_y 1,0
05aa : 08              >            php         ;save flags
05ab : c001            >            cpy #1     ;test result
                       >            trap_ne
05ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05af : 68              >            pla         ;load status
05b0 : 48              >            pha
                       >            cmp_flag 0
05b1 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05b5 : 28              >            plp         ;restore status
                        
                                set_y 0,$ff
                       >            load_flag $ff
05b6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
05b8 : 48              >            pha         ;use stack to load status
05b9 : a000            >            ldy #0     ;precharge index y
05bb : 28              >            plp
                        
05bc : 5a                       phy
                                tst_y 0,$ff
05bd : 08              >            php         ;save flags
05be : c000            >            cpy #0     ;test result
                       >            trap_ne
05c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05c2 : 68              >            pla         ;load status
05c3 : 48              >            pha
                       >            cmp_flag $ff
05c4 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05c8 : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
05c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
05cb : 48              >            pha         ;use stack to load status
05cc : a0ff            >            ldy #$ff     ;precharge index y
05ce : 28              >            plp
                        
05cf : 5a                       phy
                                tst_y $ff,0
05d0 : 08              >            php         ;save flags
05d1 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
05d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05d5 : 68              >            pla         ;load status
05d6 : 48              >            pha
                       >            cmp_flag 0
05d7 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05d9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05db : 28              >            plp         ;restore status
                        
                                set_y 0,$ff     ;pull
                       >            load_flag $ff     
05dc : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
05de : 48              >            pha         ;use stack to load status
05df : a000            >            ldy #0     ;precharge index y
05e1 : 28              >            plp
                        
05e2 : 7a                       ply
                                tst_y $ff,$ff-zero
05e3 : 08              >            php         ;save flags
05e4 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
05e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05e8 : 68              >            pla         ;load status
05e9 : 48              >            pha
                       >            cmp_flag $ff-zero
05ea : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05ee : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
05ef : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
05f1 : 48              >            pha         ;use stack to load status
05f2 : a0ff            >            ldy #$ff     ;precharge index y
05f4 : 28              >            plp
                        
05f5 : 7a                       ply
                                tst_y 0,zero
05f6 : 08              >            php         ;save flags
05f7 : c000            >            cpy #0     ;test result
                       >            trap_ne
05f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
05fb : 68              >            pla         ;load status
05fc : 48              >            pha
                       >            cmp_flag zero
05fd : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0601 : 28              >            plp         ;restore status
                        
                                set_y $fe,$ff
                       >            load_flag $ff
0602 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0604 : 48              >            pha         ;use stack to load status
0605 : a0fe            >            ldy #$fe     ;precharge index y
0607 : 28              >            plp
                        
0608 : 7a                       ply
                                tst_y 1,$ff-zero-minus
0609 : 08              >            php         ;save flags
060a : c001            >            cpy #1     ;test result
                       >            trap_ne
060c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
060e : 68              >            pla         ;load status
060f : 48              >            pha
                       >            cmp_flag $ff-zero-minus
0610 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0612 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0614 : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
0615 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0617 : 48              >            pha         ;use stack to load status
0618 : a000            >            ldy #0     ;precharge index y
061a : 28              >            plp
                        
061b : 7a                       ply
                                tst_y $ff,minus
061c : 08              >            php         ;save flags
061d : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
061f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0621 : 68              >            pla         ;load status
0622 : 48              >            pha
                       >            cmp_flag minus
0623 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0625 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0627 : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
0628 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
062a : 48              >            pha         ;use stack to load status
062b : a0ff            >            ldy #$ff     ;precharge index y
062d : 28              >            plp
                        
062e : 7a                       ply
                                tst_y 0,$ff-minus
062f : 08              >            php         ;save flags
0630 : c000            >            cpy #0     ;test result
                       >            trap_ne
0632 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0634 : 68              >            pla         ;load status
0635 : 48              >            pha
                       >            cmp_flag $ff-minus
0636 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0638 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
063a : 28              >            plp         ;restore status
                        
                                set_y $fe,0
                       >            load_flag 0
063b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
063d : 48              >            pha         ;use stack to load status
063e : a0fe            >            ldy #$fe     ;precharge index y
0640 : 28              >            plp
                        
0641 : 7a                       ply
                                tst_y 1,0
0642 : 08              >            php         ;save flags
0643 : c001            >            cpy #1     ;test result
                       >            trap_ne
0645 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0647 : 68              >            pla         ;load status
0648 : 48              >            pha
                       >            cmp_flag 0
0649 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
064b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
064d : 28              >            plp         ;restore status
                        
064e : e055                     cpx #$55        ;x unchanged?
                                trap_ne
0650 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test            
0652 : ad0202          >            lda test_case   ;previous test
0655 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0657 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
0659 : a904            >            lda #test_num   ;*** next tests' number
065b : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; PC modifying instructions (BRA, BBR, BBS, 1, 2, 3 byte NOPs, JMP(abs,x))
                        ; testing unconditional branch BRA
                        
065e : a281                     ldx #$81        ;protect unused registers
0660 : a07e                     ldy #$7e
                                set_a 0,$ff
                       >            load_flag $ff
0662 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0664 : 48              >            pha         ;use stack to load status
0665 : a900            >            lda #0     ;precharge accu
0667 : 28              >            plp
                        
0668 : 8003                     bra br1         ;branch should always be taken
                                trap 
066a : 4c6a06          >        jmp *           ;failed anyway
                        
066d :                  br1
                                tst_a 0,$ff
066d : 08              >            php         ;save flags
066e : c900            >            cmp #0     ;test result
                       >            trap_ne
0670 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0672 : 68              >            pla         ;load status
0673 : 48              >            pha
                       >            cmp_flag $ff
0674 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0676 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0678 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
0679 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
067b : 48              >            pha         ;use stack to load status
067c : a9ff            >            lda #$ff     ;precharge accu
067e : 28              >            plp
                        
067f : 8003                     bra br2         ;branch should always be taken
                                trap 
0681 : 4c8106          >        jmp *           ;failed anyway
                        
0684 :                  br2
                                tst_a $ff,0
0684 : 08              >            php         ;save flags
0685 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0687 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0689 : 68              >            pla         ;load status
068a : 48              >            pha
                       >            cmp_flag 0
068b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
068d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
068f : 28              >            plp         ;restore status
                        
0690 : e081                     cpx #$81
                                trap_ne
0692 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0694 : c07e                     cpy #$7e
                                trap_ne
0696 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test            
0698 : ad0202          >            lda test_case   ;previous test
069b : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
069d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
069f : a905            >            lda #test_num   ;*** next tests' number
06a1 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
06a4 : a000                     ldy #0          ;branch range test  
06a6 : 8061                     bra bra0
                                
06a8 : c001             bra1    cpy #1
                                trap_ne         ;long range backward
06aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
06ac : c8                       iny        
06ad : 8053                     bra bra2
                                        
06af : c003             bra3    cpy #3
                                trap_ne         ;long range backward
06b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
06b3 : c8                       iny        
06b4 : 8045                     bra bra4
                                        
06b6 : c005             bra5    cpy #5
                                trap_ne         ;long range backward
06b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
06ba : c8                       iny        
06bb : a000                     ldy #0
06bd : 8004                     bra brf0
                                
06bf : c8                       iny
06c0 : c8                       iny
06c1 : c8                       iny
06c2 : c8                       iny        
06c3 : 8003             brf0    bra brf1
                        
06c5 : c8                       iny
06c6 : c8                       iny
06c7 : c8                       iny
06c8 : c8               brf1    iny        
06c9 : 8002                     bra brf2
                                
06cb : c8                       iny
06cc : c8                       iny
06cd : c8               brf2    iny
06ce : c8                       iny        
06cf : 8001                     bra brf3
                                
06d1 : c8                       iny
06d2 : c8               brf3    iny
06d3 : c8                       iny
06d4 : c8                       iny        
06d5 : 8000                     bra brf4
                                
06d7 : c8               brf4    iny
06d8 : c8                       iny
06d9 : c8                       iny
06da : c8                       iny
06db : c00a                     cpy #10
                                trap_ne     ;short range forward
06dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
06df : 8012                     bra brb0
                        
06e1 : 88               brb4    dey
06e2 : 88                       dey
06e3 : 88                       dey
06e4 : 88                       dey
06e5 : 800e                     bra brb5        
                        
06e7 : 88               brb3    dey
06e8 : 88                       dey
06e9 : 88                       dey
06ea : 80f5                     bra brb4        
                        
06ec : 88               brb2    dey
06ed : 88                       dey
06ee : 80f7                     bra brb3        
                        
06f0 : 88               brb1    dey
06f1 : 80f9                     bra brb2        
                        
06f3 : 80fb             brb0    bra brb1        
                        
06f5 : c000             brb5    cpy #0
                                trap_ne     ;short range backward
06f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
06f9 : 8015                     bra bra6
                        
06fb : c004             bra4    cpy #4
                                trap_ne     ;long range forward
06fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
06ff : c8                       iny        
0700 : 80b4                     bra bra5
                                        
0702 : c002             bra2    cpy #2
                                trap_ne     ;long range forward
0704 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0706 : c8                       iny        
0707 : 80a6                     bra bra3
                                        
0709 : c000             bra0    cpy #0
                                trap_ne     ;long range forward
070b : d0fe            >        bne *           ;failed not equal (non zero)
                        
070d : c8                       iny        
070e : 8098                     bra bra1
                                        
0710 :                  bra6
                                next_test
0710 : ad0202          >            lda test_case   ;previous test
0713 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0715 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
0717 : a906            >            lda #test_num   ;*** next tests' number
0719 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                            if rkwl_wdc_op = 1
                        ; testing BBR & BBS
                        
                        bbt     macro           ;\1 = bitnum
                                lda #(1<<\1)    ;testing 1 bit on
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbr \1,zpt,fail1\?
                                bbs \1,zpt,ok1\?
                                trap            ;bbs branch not taken
                        fail1\?
                                trap            ;bbr branch taken
                        ok1\?   
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbr \1,zpt,fail2\?
                                bbs \1,zpt,ok2\?
                                trap            ;bbs branch not taken
                        fail2\? 
                                trap            ;bbr branch taken
                        ok2\?   
                                tst_a $cc,$ff
                                lda zpt
                                cmp #(1<<\1)
                                trap_ne         ;zp altered
                                lda #$ff-(1<<\1) ;testing 1 bit off
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbs \1,zpt,fail3\?
                                bbr \1,zpt,ok3\?
                                trap            ;bbr branch not taken
                        fail3\? 
                                trap            ;bbs branch taken
                        ok3\?   
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbs \1,zpt,fail4\?
                                bbr \1,zpt,ok4\?
                                trap            ;bbr branch not taken
                        fail4\? 
                                trap            ;bbs branch taken
                        ok4\?   
                                tst_a $cc,$ff
                                lda zpt
                                cmp #$ff-(1<<\1)
                                trap_ne         ;zp altered
                                endm
                        
071c : a211                     ldx #$11        ;test bbr/bbs integrity
071e : a022                     ldy #$22
                                bbt 0
0720 : a901            >        lda #(1<<0)    ;testing 1 bit on
0722 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0724 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0726 : 48              >            pha         ;use stack to load status
0727 : a933            >            lda #$33     ;precharge accu
0729 : 28              >            plp
                       >
072a : 0f0c06          >        bbr 0,zpt,fail10196
072d : 8f0c06          >        bbs 0,zpt,ok10196
                       >        trap            ;bbs branch not taken
0730 : 4c3007          >        jmp *           ;failed anyway
                       >
0733 :                 >fail10196
                       >        trap            ;bbr branch taken
0733 : 4c3307          >        jmp *           ;failed anyway
                       >
0736 :                 >ok10196   
                       >        tst_a $33,0
0736 : 08              >            php         ;save flags
0737 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0739 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
073b : 68              >            pla         ;load status
073c : 48              >            pha
                       >            cmp_flag 0
073d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
073f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0741 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0742 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0744 : 48              >            pha         ;use stack to load status
0745 : a9cc            >            lda #$cc     ;precharge accu
0747 : 28              >            plp
                       >
0748 : 0f0c06          >        bbr 0,zpt,fail20196
074b : 8f0c06          >        bbs 0,zpt,ok20196
                       >        trap            ;bbs branch not taken
074e : 4c4e07          >        jmp *           ;failed anyway
                       >
0751 :                 >fail20196 
                       >        trap            ;bbr branch taken
0751 : 4c5107          >        jmp *           ;failed anyway
                       >
0754 :                 >ok20196   
                       >        tst_a $cc,$ff
0754 : 08              >            php         ;save flags
0755 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0757 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0759 : 68              >            pla         ;load status
075a : 48              >            pha
                       >            cmp_flag $ff
075b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
075d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
075f : 28              >            plp         ;restore status
                       >
0760 : a50c            >        lda zpt
0762 : c901            >        cmp #(1<<0)
                       >        trap_ne         ;zp altered
0764 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0766 : a9fe            >        lda #$ff-(1<<0) ;testing 1 bit off
0768 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
076a : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
076c : 48              >            pha         ;use stack to load status
076d : a933            >            lda #$33     ;precharge accu
076f : 28              >            plp
                       >
0770 : 8f0c06          >        bbs 0,zpt,fail30196
0773 : 0f0c06          >        bbr 0,zpt,ok30196
                       >        trap            ;bbr branch not taken
0776 : 4c7607          >        jmp *           ;failed anyway
                       >
0779 :                 >fail30196 
                       >        trap            ;bbs branch taken
0779 : 4c7907          >        jmp *           ;failed anyway
                       >
077c :                 >ok30196   
                       >        tst_a $33,0
077c : 08              >            php         ;save flags
077d : c933            >            cmp #$33     ;test result
                       >            trap_ne
077f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0781 : 68              >            pla         ;load status
0782 : 48              >            pha
                       >            cmp_flag 0
0783 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0785 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0787 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0788 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
078a : 48              >            pha         ;use stack to load status
078b : a9cc            >            lda #$cc     ;precharge accu
078d : 28              >            plp
                       >
078e : 8f0c06          >        bbs 0,zpt,fail40196
0791 : 0f0c06          >        bbr 0,zpt,ok40196
                       >        trap            ;bbr branch not taken
0794 : 4c9407          >        jmp *           ;failed anyway
                       >
0797 :                 >fail40196 
                       >        trap            ;bbs branch taken
0797 : 4c9707          >        jmp *           ;failed anyway
                       >
079a :                 >ok40196   
                       >        tst_a $cc,$ff
079a : 08              >            php         ;save flags
079b : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
079d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
079f : 68              >            pla         ;load status
07a0 : 48              >            pha
                       >            cmp_flag $ff
07a1 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
07a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07a5 : 28              >            plp         ;restore status
                       >
07a6 : a50c            >        lda zpt
07a8 : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne         ;zp altered
07aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 1
07ac : a902            >        lda #(1<<1)    ;testing 1 bit on
07ae : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
07b0 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
07b2 : 48              >            pha         ;use stack to load status
07b3 : a933            >            lda #$33     ;precharge accu
07b5 : 28              >            plp
                       >
07b6 : 1f0c06          >        bbr 1,zpt,fail10231
07b9 : 9f0c06          >        bbs 1,zpt,ok10231
                       >        trap            ;bbs branch not taken
07bc : 4cbc07          >        jmp *           ;failed anyway
                       >
07bf :                 >fail10231
                       >        trap            ;bbr branch taken
07bf : 4cbf07          >        jmp *           ;failed anyway
                       >
07c2 :                 >ok10231   
                       >        tst_a $33,0
07c2 : 08              >            php         ;save flags
07c3 : c933            >            cmp #$33     ;test result
                       >            trap_ne
07c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c7 : 68              >            pla         ;load status
07c8 : 48              >            pha
                       >            cmp_flag 0
07c9 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
07cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07cd : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
07ce : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
07d0 : 48              >            pha         ;use stack to load status
07d1 : a9cc            >            lda #$cc     ;precharge accu
07d3 : 28              >            plp
                       >
07d4 : 1f0c06          >        bbr 1,zpt,fail20231
07d7 : 9f0c06          >        bbs 1,zpt,ok20231
                       >        trap            ;bbs branch not taken
07da : 4cda07          >        jmp *           ;failed anyway
                       >
07dd :                 >fail20231 
                       >        trap            ;bbr branch taken
07dd : 4cdd07          >        jmp *           ;failed anyway
                       >
07e0 :                 >ok20231   
                       >        tst_a $cc,$ff
07e0 : 08              >            php         ;save flags
07e1 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
07e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07e5 : 68              >            pla         ;load status
07e6 : 48              >            pha
                       >            cmp_flag $ff
07e7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
07e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07eb : 28              >            plp         ;restore status
                       >
07ec : a50c            >        lda zpt
07ee : c902            >        cmp #(1<<1)
                       >        trap_ne         ;zp altered
07f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07f2 : a9fd            >        lda #$ff-(1<<1) ;testing 1 bit off
07f4 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
07f6 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
07f8 : 48              >            pha         ;use stack to load status
07f9 : a933            >            lda #$33     ;precharge accu
07fb : 28              >            plp
                       >
07fc : 9f0c06          >        bbs 1,zpt,fail30231
07ff : 1f0c06          >        bbr 1,zpt,ok30231
                       >        trap            ;bbr branch not taken
0802 : 4c0208          >        jmp *           ;failed anyway
                       >
0805 :                 >fail30231 
                       >        trap            ;bbs branch taken
0805 : 4c0508          >        jmp *           ;failed anyway
                       >
0808 :                 >ok30231   
                       >        tst_a $33,0
0808 : 08              >            php         ;save flags
0809 : c933            >            cmp #$33     ;test result
                       >            trap_ne
080b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
080d : 68              >            pla         ;load status
080e : 48              >            pha
                       >            cmp_flag 0
080f : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0811 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0813 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0814 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0816 : 48              >            pha         ;use stack to load status
0817 : a9cc            >            lda #$cc     ;precharge accu
0819 : 28              >            plp
                       >
081a : 9f0c06          >        bbs 1,zpt,fail40231
081d : 1f0c06          >        bbr 1,zpt,ok40231
                       >        trap            ;bbr branch not taken
0820 : 4c2008          >        jmp *           ;failed anyway
                       >
0823 :                 >fail40231 
                       >        trap            ;bbs branch taken
0823 : 4c2308          >        jmp *           ;failed anyway
                       >
0826 :                 >ok40231   
                       >        tst_a $cc,$ff
0826 : 08              >            php         ;save flags
0827 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0829 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
082b : 68              >            pla         ;load status
082c : 48              >            pha
                       >            cmp_flag $ff
082d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
082f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0831 : 28              >            plp         ;restore status
                       >
0832 : a50c            >        lda zpt
0834 : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne         ;zp altered
0836 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 2
0838 : a904            >        lda #(1<<2)    ;testing 1 bit on
083a : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
083c : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
083e : 48              >            pha         ;use stack to load status
083f : a933            >            lda #$33     ;precharge accu
0841 : 28              >            plp
                       >
0842 : 2f0c06          >        bbr 2,zpt,fail10266
0845 : af0c06          >        bbs 2,zpt,ok10266
                       >        trap            ;bbs branch not taken
0848 : 4c4808          >        jmp *           ;failed anyway
                       >
084b :                 >fail10266
                       >        trap            ;bbr branch taken
084b : 4c4b08          >        jmp *           ;failed anyway
                       >
084e :                 >ok10266   
                       >        tst_a $33,0
084e : 08              >            php         ;save flags
084f : c933            >            cmp #$33     ;test result
                       >            trap_ne
0851 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0853 : 68              >            pla         ;load status
0854 : 48              >            pha
                       >            cmp_flag 0
0855 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0857 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0859 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
085a : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
085c : 48              >            pha         ;use stack to load status
085d : a9cc            >            lda #$cc     ;precharge accu
085f : 28              >            plp
                       >
0860 : 2f0c06          >        bbr 2,zpt,fail20266
0863 : af0c06          >        bbs 2,zpt,ok20266
                       >        trap            ;bbs branch not taken
0866 : 4c6608          >        jmp *           ;failed anyway
                       >
0869 :                 >fail20266 
                       >        trap            ;bbr branch taken
0869 : 4c6908          >        jmp *           ;failed anyway
                       >
086c :                 >ok20266   
                       >        tst_a $cc,$ff
086c : 08              >            php         ;save flags
086d : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
086f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0871 : 68              >            pla         ;load status
0872 : 48              >            pha
                       >            cmp_flag $ff
0873 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0875 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0877 : 28              >            plp         ;restore status
                       >
0878 : a50c            >        lda zpt
087a : c904            >        cmp #(1<<2)
                       >        trap_ne         ;zp altered
087c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
087e : a9fb            >        lda #$ff-(1<<2) ;testing 1 bit off
0880 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0882 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0884 : 48              >            pha         ;use stack to load status
0885 : a933            >            lda #$33     ;precharge accu
0887 : 28              >            plp
                       >
0888 : af0c06          >        bbs 2,zpt,fail30266
088b : 2f0c06          >        bbr 2,zpt,ok30266
                       >        trap            ;bbr branch not taken
088e : 4c8e08          >        jmp *           ;failed anyway
                       >
0891 :                 >fail30266 
                       >        trap            ;bbs branch taken
0891 : 4c9108          >        jmp *           ;failed anyway
                       >
0894 :                 >ok30266   
                       >        tst_a $33,0
0894 : 08              >            php         ;save flags
0895 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0897 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0899 : 68              >            pla         ;load status
089a : 48              >            pha
                       >            cmp_flag 0
089b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
089d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
089f : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
08a0 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
08a2 : 48              >            pha         ;use stack to load status
08a3 : a9cc            >            lda #$cc     ;precharge accu
08a5 : 28              >            plp
                       >
08a6 : af0c06          >        bbs 2,zpt,fail40266
08a9 : 2f0c06          >        bbr 2,zpt,ok40266
                       >        trap            ;bbr branch not taken
08ac : 4cac08          >        jmp *           ;failed anyway
                       >
08af :                 >fail40266 
                       >        trap            ;bbs branch taken
08af : 4caf08          >        jmp *           ;failed anyway
                       >
08b2 :                 >ok40266   
                       >        tst_a $cc,$ff
08b2 : 08              >            php         ;save flags
08b3 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
08b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08b7 : 68              >            pla         ;load status
08b8 : 48              >            pha
                       >            cmp_flag $ff
08b9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08bd : 28              >            plp         ;restore status
                       >
08be : a50c            >        lda zpt
08c0 : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne         ;zp altered
08c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 3
08c4 : a908            >        lda #(1<<3)    ;testing 1 bit on
08c6 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
08c8 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
08ca : 48              >            pha         ;use stack to load status
08cb : a933            >            lda #$33     ;precharge accu
08cd : 28              >            plp
                       >
08ce : 3f0c06          >        bbr 3,zpt,fail10301
08d1 : bf0c06          >        bbs 3,zpt,ok10301
                       >        trap            ;bbs branch not taken
08d4 : 4cd408          >        jmp *           ;failed anyway
                       >
08d7 :                 >fail10301
                       >        trap            ;bbr branch taken
08d7 : 4cd708          >        jmp *           ;failed anyway
                       >
08da :                 >ok10301   
                       >        tst_a $33,0
08da : 08              >            php         ;save flags
08db : c933            >            cmp #$33     ;test result
                       >            trap_ne
08dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08df : 68              >            pla         ;load status
08e0 : 48              >            pha
                       >            cmp_flag 0
08e1 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08e5 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
08e6 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
08e8 : 48              >            pha         ;use stack to load status
08e9 : a9cc            >            lda #$cc     ;precharge accu
08eb : 28              >            plp
                       >
08ec : 3f0c06          >        bbr 3,zpt,fail20301
08ef : bf0c06          >        bbs 3,zpt,ok20301
                       >        trap            ;bbs branch not taken
08f2 : 4cf208          >        jmp *           ;failed anyway
                       >
08f5 :                 >fail20301 
                       >        trap            ;bbr branch taken
08f5 : 4cf508          >        jmp *           ;failed anyway
                       >
08f8 :                 >ok20301   
                       >        tst_a $cc,$ff
08f8 : 08              >            php         ;save flags
08f9 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
08fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08fd : 68              >            pla         ;load status
08fe : 48              >            pha
                       >            cmp_flag $ff
08ff : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0901 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0903 : 28              >            plp         ;restore status
                       >
0904 : a50c            >        lda zpt
0906 : c908            >        cmp #(1<<3)
                       >        trap_ne         ;zp altered
0908 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
090a : a9f7            >        lda #$ff-(1<<3) ;testing 1 bit off
090c : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
090e : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0910 : 48              >            pha         ;use stack to load status
0911 : a933            >            lda #$33     ;precharge accu
0913 : 28              >            plp
                       >
0914 : bf0c06          >        bbs 3,zpt,fail30301
0917 : 3f0c06          >        bbr 3,zpt,ok30301
                       >        trap            ;bbr branch not taken
091a : 4c1a09          >        jmp *           ;failed anyway
                       >
091d :                 >fail30301 
                       >        trap            ;bbs branch taken
091d : 4c1d09          >        jmp *           ;failed anyway
                       >
0920 :                 >ok30301   
                       >        tst_a $33,0
0920 : 08              >            php         ;save flags
0921 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0923 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0925 : 68              >            pla         ;load status
0926 : 48              >            pha
                       >            cmp_flag 0
0927 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0929 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
092b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
092c : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
092e : 48              >            pha         ;use stack to load status
092f : a9cc            >            lda #$cc     ;precharge accu
0931 : 28              >            plp
                       >
0932 : bf0c06          >        bbs 3,zpt,fail40301
0935 : 3f0c06          >        bbr 3,zpt,ok40301
                       >        trap            ;bbr branch not taken
0938 : 4c3809          >        jmp *           ;failed anyway
                       >
093b :                 >fail40301 
                       >        trap            ;bbs branch taken
093b : 4c3b09          >        jmp *           ;failed anyway
                       >
093e :                 >ok40301   
                       >        tst_a $cc,$ff
093e : 08              >            php         ;save flags
093f : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0941 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0943 : 68              >            pla         ;load status
0944 : 48              >            pha
                       >            cmp_flag $ff
0945 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0947 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0949 : 28              >            plp         ;restore status
                       >
094a : a50c            >        lda zpt
094c : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne         ;zp altered
094e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 4
0950 : a910            >        lda #(1<<4)    ;testing 1 bit on
0952 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0954 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0956 : 48              >            pha         ;use stack to load status
0957 : a933            >            lda #$33     ;precharge accu
0959 : 28              >            plp
                       >
095a : 4f0c06          >        bbr 4,zpt,fail10336
095d : cf0c06          >        bbs 4,zpt,ok10336
                       >        trap            ;bbs branch not taken
0960 : 4c6009          >        jmp *           ;failed anyway
                       >
0963 :                 >fail10336
                       >        trap            ;bbr branch taken
0963 : 4c6309          >        jmp *           ;failed anyway
                       >
0966 :                 >ok10336   
                       >        tst_a $33,0
0966 : 08              >            php         ;save flags
0967 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0969 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
096b : 68              >            pla         ;load status
096c : 48              >            pha
                       >            cmp_flag 0
096d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
096f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0971 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0972 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0974 : 48              >            pha         ;use stack to load status
0975 : a9cc            >            lda #$cc     ;precharge accu
0977 : 28              >            plp
                       >
0978 : 4f0c06          >        bbr 4,zpt,fail20336
097b : cf0c06          >        bbs 4,zpt,ok20336
                       >        trap            ;bbs branch not taken
097e : 4c7e09          >        jmp *           ;failed anyway
                       >
0981 :                 >fail20336 
                       >        trap            ;bbr branch taken
0981 : 4c8109          >        jmp *           ;failed anyway
                       >
0984 :                 >ok20336   
                       >        tst_a $cc,$ff
0984 : 08              >            php         ;save flags
0985 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0987 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0989 : 68              >            pla         ;load status
098a : 48              >            pha
                       >            cmp_flag $ff
098b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
098d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
098f : 28              >            plp         ;restore status
                       >
0990 : a50c            >        lda zpt
0992 : c910            >        cmp #(1<<4)
                       >        trap_ne         ;zp altered
0994 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0996 : a9ef            >        lda #$ff-(1<<4) ;testing 1 bit off
0998 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
099a : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
099c : 48              >            pha         ;use stack to load status
099d : a933            >            lda #$33     ;precharge accu
099f : 28              >            plp
                       >
09a0 : cf0c06          >        bbs 4,zpt,fail30336
09a3 : 4f0c06          >        bbr 4,zpt,ok30336
                       >        trap            ;bbr branch not taken
09a6 : 4ca609          >        jmp *           ;failed anyway
                       >
09a9 :                 >fail30336 
                       >        trap            ;bbs branch taken
09a9 : 4ca909          >        jmp *           ;failed anyway
                       >
09ac :                 >ok30336   
                       >        tst_a $33,0
09ac : 08              >            php         ;save flags
09ad : c933            >            cmp #$33     ;test result
                       >            trap_ne
09af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
09b1 : 68              >            pla         ;load status
09b2 : 48              >            pha
                       >            cmp_flag 0
09b3 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
09b7 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
09b8 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
09ba : 48              >            pha         ;use stack to load status
09bb : a9cc            >            lda #$cc     ;precharge accu
09bd : 28              >            plp
                       >
09be : cf0c06          >        bbs 4,zpt,fail40336
09c1 : 4f0c06          >        bbr 4,zpt,ok40336
                       >        trap            ;bbr branch not taken
09c4 : 4cc409          >        jmp *           ;failed anyway
                       >
09c7 :                 >fail40336 
                       >        trap            ;bbs branch taken
09c7 : 4cc709          >        jmp *           ;failed anyway
                       >
09ca :                 >ok40336   
                       >        tst_a $cc,$ff
09ca : 08              >            php         ;save flags
09cb : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
09cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
09cf : 68              >            pla         ;load status
09d0 : 48              >            pha
                       >            cmp_flag $ff
09d1 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
09d5 : 28              >            plp         ;restore status
                       >
09d6 : a50c            >        lda zpt
09d8 : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne         ;zp altered
09da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 5
09dc : a920            >        lda #(1<<5)    ;testing 1 bit on
09de : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
09e0 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
09e2 : 48              >            pha         ;use stack to load status
09e3 : a933            >            lda #$33     ;precharge accu
09e5 : 28              >            plp
                       >
09e6 : 5f0c06          >        bbr 5,zpt,fail10371
09e9 : df0c06          >        bbs 5,zpt,ok10371
                       >        trap            ;bbs branch not taken
09ec : 4cec09          >        jmp *           ;failed anyway
                       >
09ef :                 >fail10371
                       >        trap            ;bbr branch taken
09ef : 4cef09          >        jmp *           ;failed anyway
                       >
09f2 :                 >ok10371   
                       >        tst_a $33,0
09f2 : 08              >            php         ;save flags
09f3 : c933            >            cmp #$33     ;test result
                       >            trap_ne
09f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
09f7 : 68              >            pla         ;load status
09f8 : 48              >            pha
                       >            cmp_flag 0
09f9 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
09fd : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
09fe : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0a00 : 48              >            pha         ;use stack to load status
0a01 : a9cc            >            lda #$cc     ;precharge accu
0a03 : 28              >            plp
                       >
0a04 : 5f0c06          >        bbr 5,zpt,fail20371
0a07 : df0c06          >        bbs 5,zpt,ok20371
                       >        trap            ;bbs branch not taken
0a0a : 4c0a0a          >        jmp *           ;failed anyway
                       >
0a0d :                 >fail20371 
                       >        trap            ;bbr branch taken
0a0d : 4c0d0a          >        jmp *           ;failed anyway
                       >
0a10 :                 >ok20371   
                       >        tst_a $cc,$ff
0a10 : 08              >            php         ;save flags
0a11 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0a13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a15 : 68              >            pla         ;load status
0a16 : 48              >            pha
                       >            cmp_flag $ff
0a17 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a1b : 28              >            plp         ;restore status
                       >
0a1c : a50c            >        lda zpt
0a1e : c920            >        cmp #(1<<5)
                       >        trap_ne         ;zp altered
0a20 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a22 : a9df            >        lda #$ff-(1<<5) ;testing 1 bit off
0a24 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0a26 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0a28 : 48              >            pha         ;use stack to load status
0a29 : a933            >            lda #$33     ;precharge accu
0a2b : 28              >            plp
                       >
0a2c : df0c06          >        bbs 5,zpt,fail30371
0a2f : 5f0c06          >        bbr 5,zpt,ok30371
                       >        trap            ;bbr branch not taken
0a32 : 4c320a          >        jmp *           ;failed anyway
                       >
0a35 :                 >fail30371 
                       >        trap            ;bbs branch taken
0a35 : 4c350a          >        jmp *           ;failed anyway
                       >
0a38 :                 >ok30371   
                       >        tst_a $33,0
0a38 : 08              >            php         ;save flags
0a39 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0a3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a3d : 68              >            pla         ;load status
0a3e : 48              >            pha
                       >            cmp_flag 0
0a3f : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a43 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0a44 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0a46 : 48              >            pha         ;use stack to load status
0a47 : a9cc            >            lda #$cc     ;precharge accu
0a49 : 28              >            plp
                       >
0a4a : df0c06          >        bbs 5,zpt,fail40371
0a4d : 5f0c06          >        bbr 5,zpt,ok40371
                       >        trap            ;bbr branch not taken
0a50 : 4c500a          >        jmp *           ;failed anyway
                       >
0a53 :                 >fail40371 
                       >        trap            ;bbs branch taken
0a53 : 4c530a          >        jmp *           ;failed anyway
                       >
0a56 :                 >ok40371   
                       >        tst_a $cc,$ff
0a56 : 08              >            php         ;save flags
0a57 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0a59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a5b : 68              >            pla         ;load status
0a5c : 48              >            pha
                       >            cmp_flag $ff
0a5d : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a61 : 28              >            plp         ;restore status
                       >
0a62 : a50c            >        lda zpt
0a64 : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne         ;zp altered
0a66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 6
0a68 : a940            >        lda #(1<<6)    ;testing 1 bit on
0a6a : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0a6c : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0a6e : 48              >            pha         ;use stack to load status
0a6f : a933            >            lda #$33     ;precharge accu
0a71 : 28              >            plp
                       >
0a72 : 6f0c06          >        bbr 6,zpt,fail10406
0a75 : ef0c06          >        bbs 6,zpt,ok10406
                       >        trap            ;bbs branch not taken
0a78 : 4c780a          >        jmp *           ;failed anyway
                       >
0a7b :                 >fail10406
                       >        trap            ;bbr branch taken
0a7b : 4c7b0a          >        jmp *           ;failed anyway
                       >
0a7e :                 >ok10406   
                       >        tst_a $33,0
0a7e : 08              >            php         ;save flags
0a7f : c933            >            cmp #$33     ;test result
                       >            trap_ne
0a81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a83 : 68              >            pla         ;load status
0a84 : 48              >            pha
                       >            cmp_flag 0
0a85 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a87 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a89 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0a8a : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0a8c : 48              >            pha         ;use stack to load status
0a8d : a9cc            >            lda #$cc     ;precharge accu
0a8f : 28              >            plp
                       >
0a90 : 6f0c06          >        bbr 6,zpt,fail20406
0a93 : ef0c06          >        bbs 6,zpt,ok20406
                       >        trap            ;bbs branch not taken
0a96 : 4c960a          >        jmp *           ;failed anyway
                       >
0a99 :                 >fail20406 
                       >        trap            ;bbr branch taken
0a99 : 4c990a          >        jmp *           ;failed anyway
                       >
0a9c :                 >ok20406   
                       >        tst_a $cc,$ff
0a9c : 08              >            php         ;save flags
0a9d : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0a9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aa1 : 68              >            pla         ;load status
0aa2 : 48              >            pha
                       >            cmp_flag $ff
0aa3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0aa5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aa7 : 28              >            plp         ;restore status
                       >
0aa8 : a50c            >        lda zpt
0aaa : c940            >        cmp #(1<<6)
                       >        trap_ne         ;zp altered
0aac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aae : a9bf            >        lda #$ff-(1<<6) ;testing 1 bit off
0ab0 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0ab2 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0ab4 : 48              >            pha         ;use stack to load status
0ab5 : a933            >            lda #$33     ;precharge accu
0ab7 : 28              >            plp
                       >
0ab8 : ef0c06          >        bbs 6,zpt,fail30406
0abb : 6f0c06          >        bbr 6,zpt,ok30406
                       >        trap            ;bbr branch not taken
0abe : 4cbe0a          >        jmp *           ;failed anyway
                       >
0ac1 :                 >fail30406 
                       >        trap            ;bbs branch taken
0ac1 : 4cc10a          >        jmp *           ;failed anyway
                       >
0ac4 :                 >ok30406   
                       >        tst_a $33,0
0ac4 : 08              >            php         ;save flags
0ac5 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0ac7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ac9 : 68              >            pla         ;load status
0aca : 48              >            pha
                       >            cmp_flag 0
0acb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0acd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0acf : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0ad0 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0ad2 : 48              >            pha         ;use stack to load status
0ad3 : a9cc            >            lda #$cc     ;precharge accu
0ad5 : 28              >            plp
                       >
0ad6 : ef0c06          >        bbs 6,zpt,fail40406
0ad9 : 6f0c06          >        bbr 6,zpt,ok40406
                       >        trap            ;bbr branch not taken
0adc : 4cdc0a          >        jmp *           ;failed anyway
                       >
0adf :                 >fail40406 
                       >        trap            ;bbs branch taken
0adf : 4cdf0a          >        jmp *           ;failed anyway
                       >
0ae2 :                 >ok40406   
                       >        tst_a $cc,$ff
0ae2 : 08              >            php         ;save flags
0ae3 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0ae5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ae7 : 68              >            pla         ;load status
0ae8 : 48              >            pha
                       >            cmp_flag $ff
0ae9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0aeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aed : 28              >            plp         ;restore status
                       >
0aee : a50c            >        lda zpt
0af0 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne         ;zp altered
0af2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                bbt 7
0af4 : a980            >        lda #(1<<7)    ;testing 1 bit on
0af6 : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0af8 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0afa : 48              >            pha         ;use stack to load status
0afb : a933            >            lda #$33     ;precharge accu
0afd : 28              >            plp
                       >
0afe : 7f0c06          >        bbr 7,zpt,fail10441
0b01 : ff0c06          >        bbs 7,zpt,ok10441
                       >        trap            ;bbs branch not taken
0b04 : 4c040b          >        jmp *           ;failed anyway
                       >
0b07 :                 >fail10441
                       >        trap            ;bbr branch taken
0b07 : 4c070b          >        jmp *           ;failed anyway
                       >
0b0a :                 >ok10441   
                       >        tst_a $33,0
0b0a : 08              >            php         ;save flags
0b0b : c933            >            cmp #$33     ;test result
                       >            trap_ne
0b0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b0f : 68              >            pla         ;load status
0b10 : 48              >            pha
                       >            cmp_flag 0
0b11 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b15 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0b16 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0b18 : 48              >            pha         ;use stack to load status
0b19 : a9cc            >            lda #$cc     ;precharge accu
0b1b : 28              >            plp
                       >
0b1c : 7f0c06          >        bbr 7,zpt,fail20441
0b1f : ff0c06          >        bbs 7,zpt,ok20441
                       >        trap            ;bbs branch not taken
0b22 : 4c220b          >        jmp *           ;failed anyway
                       >
0b25 :                 >fail20441 
                       >        trap            ;bbr branch taken
0b25 : 4c250b          >        jmp *           ;failed anyway
                       >
0b28 :                 >ok20441   
                       >        tst_a $cc,$ff
0b28 : 08              >            php         ;save flags
0b29 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0b2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b2d : 68              >            pla         ;load status
0b2e : 48              >            pha
                       >            cmp_flag $ff
0b2f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b33 : 28              >            plp         ;restore status
                       >
0b34 : a50c            >        lda zpt
0b36 : c980            >        cmp #(1<<7)
                       >        trap_ne         ;zp altered
0b38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b3a : a97f            >        lda #$ff-(1<<7) ;testing 1 bit off
0b3c : 850c            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0b3e : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0b40 : 48              >            pha         ;use stack to load status
0b41 : a933            >            lda #$33     ;precharge accu
0b43 : 28              >            plp
                       >
0b44 : ff0c06          >        bbs 7,zpt,fail30441
0b47 : 7f0c06          >        bbr 7,zpt,ok30441
                       >        trap            ;bbr branch not taken
0b4a : 4c4a0b          >        jmp *           ;failed anyway
                       >
0b4d :                 >fail30441 
                       >        trap            ;bbs branch taken
0b4d : 4c4d0b          >        jmp *           ;failed anyway
                       >
0b50 :                 >ok30441   
                       >        tst_a $33,0
0b50 : 08              >            php         ;save flags
0b51 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0b53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b55 : 68              >            pla         ;load status
0b56 : 48              >            pha
                       >            cmp_flag 0
0b57 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b5b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0b5c : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0b5e : 48              >            pha         ;use stack to load status
0b5f : a9cc            >            lda #$cc     ;precharge accu
0b61 : 28              >            plp
                       >
0b62 : ff0c06          >        bbs 7,zpt,fail40441
0b65 : 7f0c06          >        bbr 7,zpt,ok40441
                       >        trap            ;bbr branch not taken
0b68 : 4c680b          >        jmp *           ;failed anyway
                       >
0b6b :                 >fail40441 
                       >        trap            ;bbs branch taken
0b6b : 4c6b0b          >        jmp *           ;failed anyway
                       >
0b6e :                 >ok40441   
                       >        tst_a $cc,$ff
0b6e : 08              >            php         ;save flags
0b6f : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0b71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b73 : 68              >            pla         ;load status
0b74 : 48              >            pha
                       >            cmp_flag $ff
0b75 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b79 : 28              >            plp         ;restore status
                       >
0b7a : a50c            >        lda zpt
0b7c : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne         ;zp altered
0b7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
0b80 : e011                     cpx #$11
                                trap_ne         ;x overwritten
0b82 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0b84 : c022                     cpy #$22
                                trap_ne         ;y overwritten
0b86 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test 
0b88 : ad0202          >            lda test_case   ;previous test
0b8b : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0b8d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
0b8f : a907            >            lda #test_num   ;*** next tests' number
0b91 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        bbrc    macro           ;\1 = bitnum
                                bbr \1,zpt,skip\?
                                eor #(1<<\1)       
                        skip\?
                                endm
                        bbsc    macro           ;\1 = bitnum
                                bbs \1,zpt,skip\?
                                eor #(1<<\1)       
                        skip\?
                                endm
                        
0b94 : a900                     lda #0          ;combined bit test
0b96 : 850c                     sta zpt
0b98 : a900             bbcl    lda #0
                                bbrc 0
0b9a : 0f0c02          >        bbr 0,zpt,skip0480
0b9d : 4901            >        eor #(1<<0)       
0b9f :                 >skip0480
                        
                                bbrc 1
0b9f : 1f0c02          >        bbr 1,zpt,skip0481
0ba2 : 4902            >        eor #(1<<1)       
0ba4 :                 >skip0481
                        
                                bbrc 2
0ba4 : 2f0c02          >        bbr 2,zpt,skip0482
0ba7 : 4904            >        eor #(1<<2)       
0ba9 :                 >skip0482
                        
                                bbrc 3
0ba9 : 3f0c02          >        bbr 3,zpt,skip0483
0bac : 4908            >        eor #(1<<3)       
0bae :                 >skip0483
                        
                                bbrc 4
0bae : 4f0c02          >        bbr 4,zpt,skip0484
0bb1 : 4910            >        eor #(1<<4)       
0bb3 :                 >skip0484
                        
                                bbrc 5
0bb3 : 5f0c02          >        bbr 5,zpt,skip0485
0bb6 : 4920            >        eor #(1<<5)       
0bb8 :                 >skip0485
                        
                                bbrc 6
0bb8 : 6f0c02          >        bbr 6,zpt,skip0486
0bbb : 4940            >        eor #(1<<6)       
0bbd :                 >skip0486
                        
                                bbrc 7
0bbd : 7f0c02          >        bbr 7,zpt,skip0487
0bc0 : 4980            >        eor #(1<<7)       
0bc2 :                 >skip0487
                        
0bc2 : 450c                     eor zpt
                                trap_ne         ;failed bbr bitnum in accu       
0bc4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0bc6 : a9ff                     lda #$ff
                                bbsc 0
0bc8 : 8f0c02          >        bbs 0,zpt,skip0489
0bcb : 4901            >        eor #(1<<0)       
0bcd :                 >skip0489
                        
                                bbsc 1
0bcd : 9f0c02          >        bbs 1,zpt,skip0490
0bd0 : 4902            >        eor #(1<<1)       
0bd2 :                 >skip0490
                        
                                bbsc 2
0bd2 : af0c02          >        bbs 2,zpt,skip0491
0bd5 : 4904            >        eor #(1<<2)       
0bd7 :                 >skip0491
                        
                                bbsc 3
0bd7 : bf0c02          >        bbs 3,zpt,skip0492
0bda : 4908            >        eor #(1<<3)       
0bdc :                 >skip0492
                        
                                bbsc 4
0bdc : cf0c02          >        bbs 4,zpt,skip0493
0bdf : 4910            >        eor #(1<<4)       
0be1 :                 >skip0493
                        
                                bbsc 5
0be1 : df0c02          >        bbs 5,zpt,skip0494
0be4 : 4920            >        eor #(1<<5)       
0be6 :                 >skip0494
                        
                                bbsc 6
0be6 : ef0c02          >        bbs 6,zpt,skip0495
0be9 : 4940            >        eor #(1<<6)       
0beb :                 >skip0495
                        
                                bbsc 7
0beb : ff0c02          >        bbs 7,zpt,skip0496
0bee : 4980            >        eor #(1<<7)       
0bf0 :                 >skip0496
                        
0bf0 : 450c                     eor zpt
                                trap_ne         ;failed bbs bitnum in accu       
0bf2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0bf4 : e60c                     inc zpt
0bf6 : d0a0                     bne bbcl
                                next_test            
0bf8 : ad0202          >            lda test_case   ;previous test
0bfb : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0bfd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
0bff : a908            >            lda #test_num   ;*** next tests' number
0c01 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                            endif
                            
                        ; testing NOP
                        
                        nop_test    macro       ;\1 = opcode, \2 = # of bytes
                                    ldy #$42
                                    ldx #4-\2
                                    db  \1          ;test nop length
                                if \2 = 1
                                    dex
                                    dex
                                endif
                                if \2 = 2
                                    iny
                                    dex
                                endif
                                if \2 = 3
                                    iny
                                    iny
                                endif
                                    dex
                                    trap_ne         ;wrong number of bytes
                                    set_a $ff-\1,0
                                    db  \1          ;test nop integrity - flags off
                                    nop
                                    nop
                                    tst_a $ff-\1,0
                                    set_a $aa-\1,$ff
                                    db  \1          ;test nop integrity - flags on
                                    nop
                                    nop
                                    tst_a $aa-\1,$ff
                                    cpy #$42
                                    trap_ne         ;y changed
                                    cpx #0
                                    trap_ne         ;x changed
                                    endm
                        
                            if skip_nop = 0
                                nop_test $02,2
                                nop_test $22,2
                                nop_test $42,2
                                nop_test $62,2
                                nop_test $82,2
                                nop_test $c2,2
                                nop_test $e2,2
                                nop_test $44,2
                                nop_test $54,2
                                nop_test $d4,2
                                nop_test $f4,2
                                nop_test $5c,3
                                nop_test $dc,3
                                nop_test $fc,3
                                nop_test $03,1
                                nop_test $13,1
                                nop_test $23,1
                                nop_test $33,1
                                nop_test $43,1
                                nop_test $53,1
                                nop_test $63,1
                                nop_test $73,1
                                nop_test $83,1
                                nop_test $93,1
                                nop_test $a3,1
                                nop_test $b3,1
                                nop_test $c3,1
                                nop_test $d3,1
                                nop_test $e3,1
                                nop_test $f3,1
                                nop_test $0b,1
                                nop_test $1b,1
                                nop_test $2b,1
                                nop_test $3b,1
                                nop_test $4b,1
                                nop_test $5b,1
                                nop_test $6b,1
                                nop_test $7b,1
                                nop_test $8b,1
                                nop_test $9b,1
                                nop_test $ab,1
                                nop_test $bb,1
                                nop_test $eb,1
                                nop_test $fb,1
                            if rkwl_wdc_op = 0      ;NOPs not available on Rockwell & WDC 65C02
                                nop_test $07,1
                                nop_test $17,1
                                nop_test $27,1
                                nop_test $37,1
                                nop_test $47,1
                                nop_test $57,1
                                nop_test $67,1
                                nop_test $77,1
                                nop_test $87,1
                                nop_test $97,1
                                nop_test $a7,1
                                nop_test $b7,1
                                nop_test $c7,1
                                nop_test $d7,1
                                nop_test $e7,1
                                nop_test $f7,1
                                nop_test $0f,1
                                nop_test $1f,1
                                nop_test $2f,1
                                nop_test $3f,1
                                nop_test $4f,1
                                nop_test $5f,1
                                nop_test $6f,1
                                nop_test $7f,1
                                nop_test $8f,1
                                nop_test $9f,1
                                nop_test $af,1
                                nop_test $bf,1
                                nop_test $cf,1
                                nop_test $df,1
                                nop_test $ef,1
                                nop_test $ff,1
                            endif
                            if  wdc_op = 0          ;NOPs not available on WDC 65C02 (WAI, STP)
                                nop_test $cb,1
                                nop_test $db,1
                            endif
                                next_test
                            endif
                                    
                        ; jump indirect (test page cross bug is fixed)
0c04 : a203                     ldx #3          ;prepare table
0c06 : bd301c           ji1     lda ji_adr,x
0c09 : 9dfd02                   sta ji_tab,x
0c0c : ca                       dex
0c0d : 10f7                     bpl ji1
0c0f : a91e                     lda #hi(ji_px) ;high address if page cross bug
0c11 : 8d0002                   sta pg_x
                                set_stat 0
                       >            load_flag 0
0c14 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c16 : 48              >            pha         ;use stack to load status
0c17 : 28              >            plp
                        
0c18 : a949                     lda #'I'
0c1a : a24e                     ldx #'N'
0c1c : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0c1e : 6cfd02                   jmp (ji_tab)
0c21 : ea                       nop
                                trap_ne         ;runover protection
0c22 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
0c24 : 88                       dey
0c25 : 88                       dey
0c26 : 08               ji_ret  php             ;either SP or Y count will fail, if we do not hit
0c27 : 88                       dey
0c28 : 88                       dey
0c29 : 88                       dey
0c2a : 28                       plp
                                trap_eq         ;returned flags OK?
0c2b : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
0c2d : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0c2f : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0c31 : 50fe            >        bvc *           ;failed overflow clear
                        
0c33 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0c35 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0c37 : e04f                     cpx #('N'+1)
                                trap_ne
0c39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0c3b : c03e                     cpy #('D'-6)
                                trap_ne
0c3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
0c3f : ba                       tsx             ;SP check
0c40 : e0ff                     cpx #$ff
                                trap_ne
0c42 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0c44 : ad0202          >            lda test_case   ;previous test
0c47 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0c49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
0c4b : a909            >            lda #test_num   ;*** next tests' number
0c4d : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump indexed indirect
0c50 : a20b                     ldx #11         ;prepare table
0c52 : bd6c1c           jxi1    lda jxi_adr,x
0c55 : 9df902                   sta jxi_tab,x
0c58 : ca                       dex
0c59 : 10f7                     bpl jxi1
0c5b : a91d                     lda #hi(jxi_px) ;high address if page cross bug
0c5d : 8d0002                   sta pg_x
                                set_stat 0
                       >            load_flag 0
0c60 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c62 : 48              >            pha         ;use stack to load status
0c63 : 28              >            plp
                        
0c64 : a958                     lda #'X'
0c66 : a204                     ldx #4
0c68 : a049                     ldy #'I'        ;N=0, V=0, Z=0, C=0
0c6a : 7cf902                   jmp (jxi_tab,x)
0c6d : ea                       nop
                                trap_ne         ;runover protection
0c6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
0c70 : 88                       dey
0c71 : 88                       dey
0c72 : 08               jxi_ret php             ;either SP or Y count will fail, if we do not hit
0c73 : 88                       dey
0c74 : 88                       dey
0c75 : 88                       dey
0c76 : 28                       plp
                                trap_eq         ;returned flags OK?
0c77 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
0c79 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0c7b : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0c7d : 50fe            >        bvc *           ;failed overflow clear
                        
0c7f : c9f2                     cmp #('X'^$aa)  ;returned registers OK?
                                trap_ne
0c81 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0c83 : e006                     cpx #6
                                trap_ne
0c85 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0c87 : c043                     cpy #('I'-6)
                                trap_ne
0c89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0c8b : ba                       tsx             ;SP check
0c8c : e0ff                     cpx #$ff
                                trap_ne
0c8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
0c90 : a9ac                     lda #lo(jxp_ok) ;test with index causing a page cross
0c92 : 8d0003                   sta jxp_tab
0c95 : a90c                     lda #hi(jxp_ok)
0c97 : 8d0103                   sta jxp_tab+1
0c9a : a9a9                     lda #lo(jxp_px)
0c9c : 8d0002                   sta pg_x
0c9f : a90c                     lda #hi(jxp_px)
0ca1 : 8d0102                   sta pg_x+1
0ca4 : a2ff                     ldx #$ff
0ca6 : 7c0102                   jmp (jxp_tab-$ff,x)
                                
0ca9 :                  jxp_px  
                                trap            ;page cross by index to wrong page
0ca9 : 4ca90c          >        jmp *           ;failed anyway
                        
                        
0cac :                  jxp_ok
                                next_test
0cac : ad0202          >            lda test_case   ;previous test
0caf : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0cb1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
0cb3 : a90a            >            lda #test_num   ;*** next tests' number
0cb5 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if ROM_vectors = 1
                        ; test BRK clears decimal mode
                                load_flag 0     ;with interrupts enabled if allowed!
0cb8 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                        
0cba : 48                       pha
0cbb : a942                     lda #'B'
0cbd : a252                     ldx #'R'
0cbf : a04b                     ldy #'K'
0cc1 : 28                       plp             ;N=0, V=0, Z=0, C=0
0cc2 : 00                       brk
0cc3 : 88                       dey             ;should not be executed
0cc4 :                  brk_ret0                ;address of break return
0cc4 : 08                       php             ;either SP or Y count will fail, if we do not hit
0cc5 : 88                       dey
0cc6 : 88                       dey
0cc7 : 88                       dey
0cc8 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0cca : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ccc : e053                     cpx #'R'+1
                                trap_ne
0cce : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cd0 : c045                     cpy #'K'-6
                                trap_ne
0cd2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cd4 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0cd5 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0cd7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cd9 : ba                       tsx             ;sp?
0cda : e0ff                     cpx #$ff
                                trap_ne
0cdc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        ;pass 2
                                load_flag $ff   ;with interrupts disabled if allowed!
0cde : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                        
0ce0 : 48                       pha
0ce1 : a9bd                     lda #$ff-'B'
0ce3 : a2ad                     ldx #$ff-'R'
0ce5 : a0b4                     ldy #$ff-'K'
0ce7 : 28                       plp             ;N=1, V=1, Z=1, C=1
0ce8 : 00                       brk
0ce9 : 88                       dey             ;should not be executed
0cea :                  brk_ret1                ;address of break return
0cea : 08                       php             ;either SP or Y count will fail, if we do not hit
0ceb : 88                       dey
0cec : 88                       dey
0ced : 88                       dey
0cee : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0cf0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cf2 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
0cf4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cf6 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
0cf8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cfa : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
0cfb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0cfd : d0fe            >        bne *           ;failed not equal (non zero)
                        
0cff : ba                       tsx             ;sp?
0d00 : e0ff                     cpx #$ff
                                trap_ne
0d02 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0d04 : ad0202          >            lda test_case   ;previous test
0d07 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0d09 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
0d0b : a90b            >            lda #test_num   ;*** next tests' number
0d0d : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                            endif
                         
                        ; testing accumulator increment/decrement INC A & DEC A
0d10 : a2ac                     ldx #$ac    ;protect x & y
0d12 : a0dc                     ldy #$dc
                                set_a $fe,$ff
                       >            load_flag $ff
0d14 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0d16 : 48              >            pha         ;use stack to load status
0d17 : a9fe            >            lda #$fe     ;precharge accu
0d19 : 28              >            plp
                        
0d1a : 1a                       inc a           ;ff
                                tst_as $ff,$ff-zero
0d1b : 48              >            pha
0d1c : 08              >            php         ;save flags
0d1d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0d1f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d21 : 68              >            pla         ;load status
0d22 : 48              >            pha
                       >            cmp_flag $ff-zero
0d23 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d27 : 28              >            plp         ;restore status
0d28 : 68              >            pla
                        
0d29 : 1a                       inc a           ;00
                                tst_as 0,$ff-minus
0d2a : 48              >            pha
0d2b : 08              >            php         ;save flags
0d2c : c900            >            cmp #0     ;test result
                       >            trap_ne
0d2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d30 : 68              >            pla         ;load status
0d31 : 48              >            pha
                       >            cmp_flag $ff-minus
0d32 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d36 : 28              >            plp         ;restore status
0d37 : 68              >            pla
                        
0d38 : 1a                       inc a           ;01
                                tst_as 1,$ff-minus-zero
0d39 : 48              >            pha
0d3a : 08              >            php         ;save flags
0d3b : c901            >            cmp #1     ;test result
                       >            trap_ne
0d3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d3f : 68              >            pla         ;load status
0d40 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d41 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d45 : 28              >            plp         ;restore status
0d46 : 68              >            pla
                        
0d47 : 3a                       dec a           ;00
                                tst_as 0,$ff-minus
0d48 : 48              >            pha
0d49 : 08              >            php         ;save flags
0d4a : c900            >            cmp #0     ;test result
                       >            trap_ne
0d4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d4e : 68              >            pla         ;load status
0d4f : 48              >            pha
                       >            cmp_flag $ff-minus
0d50 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d54 : 28              >            plp         ;restore status
0d55 : 68              >            pla
                        
0d56 : 3a                       dec a           ;ff
                                tst_as $ff,$ff-zero
0d57 : 48              >            pha
0d58 : 08              >            php         ;save flags
0d59 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0d5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d5d : 68              >            pla         ;load status
0d5e : 48              >            pha
                       >            cmp_flag $ff-zero
0d5f : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d63 : 28              >            plp         ;restore status
0d64 : 68              >            pla
                        
0d65 : 3a                       dec a           ;fe
                                set_a $fe,0
                       >            load_flag 0
0d66 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0d68 : 48              >            pha         ;use stack to load status
0d69 : a9fe            >            lda #$fe     ;precharge accu
0d6b : 28              >            plp
                        
0d6c : 1a                       inc a           ;ff
                                tst_as $ff,minus
0d6d : 48              >            pha
0d6e : 08              >            php         ;save flags
0d6f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0d71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d73 : 68              >            pla         ;load status
0d74 : 48              >            pha
                       >            cmp_flag minus
0d75 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d79 : 28              >            plp         ;restore status
0d7a : 68              >            pla
                        
0d7b : 1a                       inc a           ;00
                                tst_as 0,zero
0d7c : 48              >            pha
0d7d : 08              >            php         ;save flags
0d7e : c900            >            cmp #0     ;test result
                       >            trap_ne
0d80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d82 : 68              >            pla         ;load status
0d83 : 48              >            pha
                       >            cmp_flag zero
0d84 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d88 : 28              >            plp         ;restore status
0d89 : 68              >            pla
                        
0d8a : 1a                       inc a           ;01
                                tst_as 1,0
0d8b : 48              >            pha
0d8c : 08              >            php         ;save flags
0d8d : c901            >            cmp #1     ;test result
                       >            trap_ne
0d8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d91 : 68              >            pla         ;load status
0d92 : 48              >            pha
                       >            cmp_flag 0
0d93 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d97 : 28              >            plp         ;restore status
0d98 : 68              >            pla
                        
0d99 : 3a                       dec a           ;00
                                tst_as 0,zero
0d9a : 48              >            pha
0d9b : 08              >            php         ;save flags
0d9c : c900            >            cmp #0     ;test result
                       >            trap_ne
0d9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0da0 : 68              >            pla         ;load status
0da1 : 48              >            pha
                       >            cmp_flag zero
0da2 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0da4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0da6 : 28              >            plp         ;restore status
0da7 : 68              >            pla
                        
0da8 : 3a                       dec a           ;ff
                                tst_as $ff,minus
0da9 : 48              >            pha
0daa : 08              >            php         ;save flags
0dab : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0dad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0daf : 68              >            pla         ;load status
0db0 : 48              >            pha
                       >            cmp_flag minus
0db1 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0db3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db5 : 28              >            plp         ;restore status
0db6 : 68              >            pla
                        
0db7 : e0ac                     cpx #$ac
                                trap_ne     ;x altered during test
0db9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0dbb : c0dc                     cpy #$dc
                                trap_ne     ;y altered during test
0dbd : d0fe            >        bne *           ;failed not equal (non zero)
                        
0dbf : ba                       tsx
0dc0 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
0dc2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0dc4 : ad0202          >            lda test_case   ;previous test
0dc7 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0dc9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
0dcb : a90c            >            lda #test_num   ;*** next tests' number
0dcd : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA (zp)
0dd0 : a299                     ldx #$99    ;protect x & y
0dd2 : a066                     ldy #$66
                                set_stat 0  
                       >            load_flag 0  
0dd4 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
0dd6 : 48              >            pha         ;use stack to load status
0dd7 : 28              >            plp
                        
0dd8 : b224                     lda (ind1)
0dda : 08                       php         ;test stores do not alter flags
0ddb : 49c3                     eor #$c3
0ddd : 28                       plp
0dde : 9230                     sta (indt)
0de0 : 08                       php         ;flags after load/store sequence
0de1 : 49c3                     eor #$c3
0de3 : c9c3                     cmp #$c3    ;test result
                                trap_ne
0de5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0de7 : 68                       pla         ;load status
                                eor_flag 0
0de8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
0dea : cd1502                   cmp fLDx    ;test flags
                                trap_ne
0ded : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0def : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0df1 : 48              >            pha         ;use stack to load status
0df2 : 28              >            plp
                        
0df3 : b226                     lda (ind1+2)
0df5 : 08                       php         ;test stores do not alter flags
0df6 : 49c3                     eor #$c3
0df8 : 28                       plp
0df9 : 9232                     sta (indt+2)
0dfb : 08                       php         ;flags after load/store sequence
0dfc : 49c3                     eor #$c3
0dfe : c982                     cmp #$82    ;test result
                                trap_ne
0e00 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e02 : 68                       pla         ;load status
                                eor_flag 0
0e03 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
0e05 : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
0e08 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e0a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e0c : 48              >            pha         ;use stack to load status
0e0d : 28              >            plp
                        
0e0e : b228                     lda (ind1+4)
0e10 : 08                       php         ;test stores do not alter flags
0e11 : 49c3                     eor #$c3
0e13 : 28                       plp
0e14 : 9234                     sta (indt+4)
0e16 : 08                       php         ;flags after load/store sequence
0e17 : 49c3                     eor #$c3
0e19 : c941                     cmp #$41    ;test result
                                trap_ne
0e1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e1d : 68                       pla         ;load status
                                eor_flag 0
0e1e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
0e20 : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
0e23 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e25 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e27 : 48              >            pha         ;use stack to load status
0e28 : 28              >            plp
                        
0e29 : b22a                     lda (ind1+6)
0e2b : 08                       php         ;test stores do not alter flags
0e2c : 49c3                     eor #$c3
0e2e : 28                       plp
0e2f : 9236                     sta (indt+6)
0e31 : 08                       php         ;flags after load/store sequence
0e32 : 49c3                     eor #$c3
0e34 : c900                     cmp #0      ;test result
                                trap_ne
0e36 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e38 : 68                       pla         ;load status
                                eor_flag 0
0e39 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
0e3b : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
0e3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e40 : e099                     cpx #$99
                                trap_ne     ;x altered during test
0e42 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e44 : c066                     cpy #$66
                                trap_ne     ;y altered during test
0e46 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
0e48 : a003                     ldy #3      ;testing store result
0e4a : a200                     ldx #0
0e4c : b90502           tstai1  lda abst,y
0e4f : 49c3                     eor #$c3
0e51 : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
0e54 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e56 : 8a                       txa
0e57 : 990502                   sta abst,y  ;clear                
0e5a : 88                       dey
0e5b : 10ef                     bpl tstai1
                        
0e5d : a299                     ldx #$99    ;protect x & y
0e5f : a066                     ldy #$66
                                set_stat $ff  
                       >            load_flag $ff  
0e61 : a9ff            >            lda #$ff               ;allow test to change I-flag (no mask)
                       >
0e63 : 48              >            pha         ;use stack to load status
0e64 : 28              >            plp
                        
0e65 : b224                     lda (ind1)
0e67 : 08                       php         ;test stores do not alter flags
0e68 : 49c3                     eor #$c3
0e6a : 28                       plp
0e6b : 9230                     sta (indt)
0e6d : 08                       php         ;flags after load/store sequence
0e6e : 49c3                     eor #$c3
0e70 : c9c3                     cmp #$c3    ;test result
                                trap_ne
0e72 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e74 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0e75 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
0e77 : cd1502                   cmp fLDx    ;test flags
                                trap_ne
0e7a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0e7c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e7e : 48              >            pha         ;use stack to load status
0e7f : 28              >            plp
                        
0e80 : b226                     lda (ind1+2)
0e82 : 08                       php         ;test stores do not alter flags
0e83 : 49c3                     eor #$c3
0e85 : 28                       plp
0e86 : 9232                     sta (indt+2)
0e88 : 08                       php         ;flags after load/store sequence
0e89 : 49c3                     eor #$c3
0e8b : c982                     cmp #$82    ;test result
                                trap_ne
0e8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e8f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0e90 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
0e92 : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
0e95 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0e97 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e99 : 48              >            pha         ;use stack to load status
0e9a : 28              >            plp
                        
0e9b : b228                     lda (ind1+4)
0e9d : 08                       php         ;test stores do not alter flags
0e9e : 49c3                     eor #$c3
0ea0 : 28                       plp
0ea1 : 9234                     sta (indt+4)
0ea3 : 08                       php         ;flags after load/store sequence
0ea4 : 49c3                     eor #$c3
0ea6 : c941                     cmp #$41    ;test result
                                trap_ne
0ea8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0eaa : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0eab : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
0ead : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
0eb0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0eb2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0eb4 : 48              >            pha         ;use stack to load status
0eb5 : 28              >            plp
                        
0eb6 : b22a                     lda (ind1+6)
0eb8 : 08                       php         ;test stores do not alter flags
0eb9 : 49c3                     eor #$c3
0ebb : 28                       plp
0ebc : 9236                     sta (indt+6)
0ebe : 08                       php         ;flags after load/store sequence
0ebf : 49c3                     eor #$c3
0ec1 : c900                     cmp #0      ;test result
                                trap_ne
0ec3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ec5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0ec6 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
0ec8 : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
0ecb : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ecd : e099                     cpx #$99
                                trap_ne     ;x altered during test
0ecf : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ed1 : c066                     cpy #$66
                                trap_ne     ;y altered during test
0ed3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
0ed5 : a003                     ldy #3      ;testing store result
0ed7 : a200                     ldx #0
0ed9 : b90502           tstai2  lda abst,y
0edc : 49c3                     eor #$c3
0ede : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
0ee1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ee3 : 8a                       txa
0ee4 : 990502                   sta abst,y  ;clear                
0ee7 : 88                       dey
0ee8 : 10ef                     bpl tstai2
0eea : ba                       tsx
0eeb : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
0eed : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0eef : ad0202          >            lda test_case   ;previous test
0ef2 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0ef4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
0ef6 : a90d            >            lda #test_num   ;*** next tests' number
0ef8 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing STZ - zp / abs / zp,x / abs,x
0efb : a07b                     ldy #123    ;protect y
0efd : a204                     ldx #4      ;precharge test area
0eff : a907                     lda #7
0f01 : 950c             tstz1   sta zpt,x
0f03 : 0a                       asl a
0f04 : ca                       dex
0f05 : 10fa                     bpl tstz1
0f07 : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
0f09 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f0b : 48              >            pha         ;use stack to load status
0f0c : a955            >            lda #$55     ;precharge accu
0f0e : 28              >            plp
                        
0f0f : 640c                     stz zpt     
0f11 : 640d                     stz zpt+1
0f13 : 640e                     stz zpt+2
0f15 : 640f                     stz zpt+3
0f17 : 6410                     stz zpt+4
                                tst_a $55,$ff
0f19 : 08              >            php         ;save flags
0f1a : c955            >            cmp #$55     ;test result
                       >            trap_ne
0f1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0f1e : 68              >            pla         ;load status
0f1f : 48              >            pha
                       >            cmp_flag $ff
0f20 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0f24 : 28              >            plp         ;restore status
                        
0f25 : b50c             tstz2   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
0f27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f29 : ca                       dex
0f2a : 10f9                     bpl tstz2
0f2c : a204                     ldx #4      ;precharge test area
0f2e : a907                     lda #7
0f30 : 950c             tstz3   sta zpt,x
0f32 : 0a                       asl a
0f33 : ca                       dex
0f34 : 10fa                     bpl tstz3
0f36 : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
0f38 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f3a : 48              >            pha         ;use stack to load status
0f3b : a9aa            >            lda #$aa     ;precharge accu
0f3d : 28              >            plp
                        
0f3e : 640c                     stz zpt     
0f40 : 640d                     stz zpt+1
0f42 : 640e                     stz zpt+2
0f44 : 640f                     stz zpt+3
0f46 : 6410                     stz zpt+4
                                tst_a $aa,0
0f48 : 08              >            php         ;save flags
0f49 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
0f4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0f4d : 68              >            pla         ;load status
0f4e : 48              >            pha
                       >            cmp_flag 0
0f4f : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0f53 : 28              >            plp         ;restore status
                        
0f54 : b50c             tstz4   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
0f56 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f58 : ca                       dex
0f59 : 10f9                     bpl tstz4
                                
0f5b : a204                     ldx #4      ;precharge test area
0f5d : a907                     lda #7
0f5f : 9d0502           tstz5   sta abst,x
0f62 : 0a                       asl a
0f63 : ca                       dex
0f64 : 10f9                     bpl tstz5
0f66 : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
0f68 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f6a : 48              >            pha         ;use stack to load status
0f6b : a955            >            lda #$55     ;precharge accu
0f6d : 28              >            plp
                        
0f6e : 9c0502                   stz abst     
0f71 : 9c0602                   stz abst+1
0f74 : 9c0702                   stz abst+2
0f77 : 9c0802                   stz abst+3
0f7a : 9c0902                   stz abst+4
                                tst_a $55,$ff
0f7d : 08              >            php         ;save flags
0f7e : c955            >            cmp #$55     ;test result
                       >            trap_ne
0f80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0f82 : 68              >            pla         ;load status
0f83 : 48              >            pha
                       >            cmp_flag $ff
0f84 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0f88 : 28              >            plp         ;restore status
                        
0f89 : bd0502           tstz6   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
0f8c : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f8e : ca                       dex
0f8f : 10f8                     bpl tstz6
0f91 : a204                     ldx #4      ;precharge test area
0f93 : a907                     lda #7
0f95 : 9d0502           tstz7   sta abst,x
0f98 : 0a                       asl a
0f99 : ca                       dex
0f9a : 10f9                     bpl tstz7
0f9c : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
0f9e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0fa0 : 48              >            pha         ;use stack to load status
0fa1 : a9aa            >            lda #$aa     ;precharge accu
0fa3 : 28              >            plp
                        
0fa4 : 9c0502                   stz abst     
0fa7 : 9c0602                   stz abst+1
0faa : 9c0702                   stz abst+2
0fad : 9c0802                   stz abst+3
0fb0 : 9c0902                   stz abst+4
                                tst_a $aa,0
0fb3 : 08              >            php         ;save flags
0fb4 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
0fb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0fb8 : 68              >            pla         ;load status
0fb9 : 48              >            pha
                       >            cmp_flag 0
0fba : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0fbe : 28              >            plp         ;restore status
                        
0fbf : bd0502           tstz8   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
0fc2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fc4 : ca                       dex
0fc5 : 10f8                     bpl tstz8
                                
0fc7 : a204                     ldx #4      ;precharge test area
0fc9 : a907                     lda #7
0fcb : 950c             tstz11  sta zpt,x
0fcd : 0a                       asl a
0fce : ca                       dex
0fcf : 10fa                     bpl tstz11
0fd1 : a204                     ldx #4
0fd3 :                  tstz15
                                set_a $55,$ff
                       >            load_flag $ff
0fd3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0fd5 : 48              >            pha         ;use stack to load status
0fd6 : a955            >            lda #$55     ;precharge accu
0fd8 : 28              >            plp
                        
0fd9 : 740c                     stz zpt,x     
                                tst_a $55,$ff
0fdb : 08              >            php         ;save flags
0fdc : c955            >            cmp #$55     ;test result
                       >            trap_ne
0fde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0fe0 : 68              >            pla         ;load status
0fe1 : 48              >            pha
                       >            cmp_flag $ff
0fe2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fe4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0fe6 : 28              >            plp         ;restore status
                        
0fe7 : ca                       dex
0fe8 : 10e9                     bpl tstz15
0fea : a204                     ldx #4
0fec : b50c             tstz12  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
0fee : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ff0 : ca                       dex
0ff1 : 10f9                     bpl tstz12
0ff3 : a204                     ldx #4      ;precharge test area
0ff5 : a907                     lda #7
0ff7 : 950c             tstz13  sta zpt,x
0ff9 : 0a                       asl a
0ffa : ca                       dex
0ffb : 10fa                     bpl tstz13
0ffd : a204                     ldx #4
0fff :                  tstz16
                                set_a $aa,0
                       >            load_flag 0
0fff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1001 : 48              >            pha         ;use stack to load status
1002 : a9aa            >            lda #$aa     ;precharge accu
1004 : 28              >            plp
                        
1005 : 740c                     stz zpt,x
                                tst_a $aa,0
1007 : 08              >            php         ;save flags
1008 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
100a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
100c : 68              >            pla         ;load status
100d : 48              >            pha
                       >            cmp_flag 0
100e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1010 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1012 : 28              >            plp         ;restore status
                        
1013 : ca                       dex
1014 : 10e9                     bpl tstz16
1016 : a204                     ldx #4
1018 : b50c             tstz14  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
101a : d0fe            >        bne *           ;failed not equal (non zero)
                        
101c : ca                       dex
101d : 10f9                     bpl tstz14
                                
101f : a204                     ldx #4      ;precharge test area
1021 : a907                     lda #7
1023 : 9d0502           tstz21  sta abst,x
1026 : 0a                       asl a
1027 : ca                       dex
1028 : 10f9                     bpl tstz21
102a : a204                     ldx #4
102c :                  tstz25
                                set_a $55,$ff
                       >            load_flag $ff
102c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
102e : 48              >            pha         ;use stack to load status
102f : a955            >            lda #$55     ;precharge accu
1031 : 28              >            plp
                        
1032 : 9e0502                   stz abst,x     
                                tst_a $55,$ff
1035 : 08              >            php         ;save flags
1036 : c955            >            cmp #$55     ;test result
                       >            trap_ne
1038 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
103a : 68              >            pla         ;load status
103b : 48              >            pha
                       >            cmp_flag $ff
103c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
103e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1040 : 28              >            plp         ;restore status
                        
1041 : ca                       dex
1042 : 10e8                     bpl tstz25
1044 : a204                     ldx #4
1046 : bd0502           tstz22  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
1049 : d0fe            >        bne *           ;failed not equal (non zero)
                        
104b : ca                       dex
104c : 10f8                     bpl tstz22
104e : a204                     ldx #4      ;precharge test area
1050 : a907                     lda #7
1052 : 9d0502           tstz23  sta abst,x
1055 : 0a                       asl a
1056 : ca                       dex
1057 : 10f9                     bpl tstz23
1059 : a204                     ldx #4
105b :                  tstz26
                                set_a $aa,0
                       >            load_flag 0
105b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
105d : 48              >            pha         ;use stack to load status
105e : a9aa            >            lda #$aa     ;precharge accu
1060 : 28              >            plp
                        
1061 : 9e0502                   stz abst,x
                                tst_a $aa,0
1064 : 08              >            php         ;save flags
1065 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
1067 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1069 : 68              >            pla         ;load status
106a : 48              >            pha
                       >            cmp_flag 0
106b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
106d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
106f : 28              >            plp         ;restore status
                        
1070 : ca                       dex
1071 : 10e8                     bpl tstz26
1073 : a204                     ldx #4
1075 : bd0502           tstz24  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
1078 : d0fe            >        bne *           ;failed not equal (non zero)
                        
107a : ca                       dex
107b : 10f8                     bpl tstz24
                                
107d : c07b                     cpy #123
                                trap_ne     ;y altered during test 
107f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1081 : ba                       tsx
1082 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1084 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
1086 : ad0202          >            lda test_case   ;previous test
1089 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
108b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
108d : a90e            >            lda #test_num   ;*** next tests' number
108f : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing BIT - zp,x / abs,x / #
1092 : a042                     ldy #$42
1094 : a203                     ldx #3
                                set_a $ff,0
                       >            load_flag 0
1096 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1098 : 48              >            pha         ;use stack to load status
1099 : a9ff            >            lda #$ff     ;precharge accu
109b : 28              >            plp
                        
109c : 3413                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
109e : 08              >            php         ;save flags
109f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
10a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10a3 : 68              >            pla         ;load status
10a4 : 48              >            pha
                       >            cmp_flag fz 
10a5 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
10a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10a9 : 28              >            plp         ;restore status
                        
10aa : ca                       dex
                                set_a 1,0
                       >            load_flag 0
10ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10ad : 48              >            pha         ;use stack to load status
10ae : a901            >            lda #1     ;precharge accu
10b0 : 28              >            plp
                        
10b1 : 3413                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
10b3 : 08              >            php         ;save flags
10b4 : c901            >            cmp #1     ;test result
                       >            trap_ne
10b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10b8 : 68              >            pla         ;load status
10b9 : 48              >            pha
                       >            cmp_flag fv
10ba : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
10bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10be : 28              >            plp         ;restore status
                        
10bf : ca                       dex
                                set_a 1,0
                       >            load_flag 0
10c0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10c2 : 48              >            pha         ;use stack to load status
10c3 : a901            >            lda #1     ;precharge accu
10c5 : 28              >            plp
                        
10c6 : 3413                     bit zp1,x   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
10c8 : 08              >            php         ;save flags
10c9 : c901            >            cmp #1     ;test result
                       >            trap_ne
10cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10cd : 68              >            pla         ;load status
10ce : 48              >            pha
                       >            cmp_flag fnz
10cf : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
10d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10d3 : 28              >            plp         ;restore status
                        
10d4 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
10d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10d7 : 48              >            pha         ;use stack to load status
10d8 : a901            >            lda #1     ;precharge accu
10da : 28              >            plp
                        
10db : 3413                     bit zp1,x   ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
10dd : 08              >            php         ;save flags
10de : c901            >            cmp #1     ;test result
                       >            trap_ne
10e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10e2 : 68              >            pla         ;load status
10e3 : 48              >            pha
                       >            cmp_flag fnv
10e4 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
10e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10e8 : 28              >            plp         ;restore status
                        
                                
                                set_a 1,$ff
                       >            load_flag $ff
10e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10eb : 48              >            pha         ;use stack to load status
10ec : a901            >            lda #1     ;precharge accu
10ee : 28              >            plp
                        
10ef : 3413                     bit zp1,x   ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
10f1 : 08              >            php         ;save flags
10f2 : c901            >            cmp #1     ;test result
                       >            trap_ne
10f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10f6 : 68              >            pla         ;load status
10f7 : 48              >            pha
                       >            cmp_flag ~fz
10f8 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
10fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
10fc : 28              >            plp         ;restore status
                        
10fd : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
10fe : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1100 : 48              >            pha         ;use stack to load status
1101 : a901            >            lda #1     ;precharge accu
1103 : 28              >            plp
                        
1104 : 3413                     bit zp1,x   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1106 : 08              >            php         ;save flags
1107 : c901            >            cmp #1     ;test result
                       >            trap_ne
1109 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
110b : 68              >            pla         ;load status
110c : 48              >            pha
                       >            cmp_flag ~fv
110d : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
110f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1111 : 28              >            plp         ;restore status
                        
1112 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
1113 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1115 : 48              >            pha         ;use stack to load status
1116 : a901            >            lda #1     ;precharge accu
1118 : 28              >            plp
                        
1119 : 3413                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
111b : 08              >            php         ;save flags
111c : c901            >            cmp #1     ;test result
                       >            trap_ne
111e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1120 : 68              >            pla         ;load status
1121 : 48              >            pha
                       >            cmp_flag ~fnz
1122 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1124 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1126 : 28              >            plp         ;restore status
                        
1127 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
1128 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
112a : 48              >            pha         ;use stack to load status
112b : a9ff            >            lda #$ff     ;precharge accu
112d : 28              >            plp
                        
112e : 3413                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1130 : 08              >            php         ;save flags
1131 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1133 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1135 : 68              >            pla         ;load status
1136 : 48              >            pha
                       >            cmp_flag ~fnv 
1137 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1139 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
113b : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
113c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
113e : 48              >            pha         ;use stack to load status
113f : a9ff            >            lda #$ff     ;precharge accu
1141 : 28              >            plp
                        
1142 : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1145 : 08              >            php         ;save flags
1146 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
114a : 68              >            pla         ;load status
114b : 48              >            pha
                       >            cmp_flag fz 
114c : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
114e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1150 : 28              >            plp         ;restore status
                        
1151 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1152 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1154 : 48              >            pha         ;use stack to load status
1155 : a901            >            lda #1     ;precharge accu
1157 : 28              >            plp
                        
1158 : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
115b : 08              >            php         ;save flags
115c : c901            >            cmp #1     ;test result
                       >            trap_ne
115e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1160 : 68              >            pla         ;load status
1161 : 48              >            pha
                       >            cmp_flag fv
1162 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1164 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1166 : 28              >            plp         ;restore status
                        
1167 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1168 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
116a : 48              >            pha         ;use stack to load status
116b : a901            >            lda #1     ;precharge accu
116d : 28              >            plp
                        
116e : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1171 : 08              >            php         ;save flags
1172 : c901            >            cmp #1     ;test result
                       >            trap_ne
1174 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1176 : 68              >            pla         ;load status
1177 : 48              >            pha
                       >            cmp_flag fnz
1178 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
117a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
117c : 28              >            plp         ;restore status
                        
117d : ca                       dex
                                set_a 1,0
                       >            load_flag 0
117e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1180 : 48              >            pha         ;use stack to load status
1181 : a901            >            lda #1     ;precharge accu
1183 : 28              >            plp
                        
1184 : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1187 : 08              >            php         ;save flags
1188 : c901            >            cmp #1     ;test result
                       >            trap_ne
118a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
118c : 68              >            pla         ;load status
118d : 48              >            pha
                       >            cmp_flag fnv
118e : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1190 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1192 : 28              >            plp         ;restore status
                        
                                
                                set_a 1,$ff
                       >            load_flag $ff
1193 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1195 : 48              >            pha         ;use stack to load status
1196 : a901            >            lda #1     ;precharge accu
1198 : 28              >            plp
                        
1199 : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
119c : 08              >            php         ;save flags
119d : c901            >            cmp #1     ;test result
                       >            trap_ne
119f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11a1 : 68              >            pla         ;load status
11a2 : 48              >            pha
                       >            cmp_flag ~fz
11a3 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
11a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11a7 : 28              >            plp         ;restore status
                        
11a8 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
11a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11ab : 48              >            pha         ;use stack to load status
11ac : a901            >            lda #1     ;precharge accu
11ae : 28              >            plp
                        
11af : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
11b2 : 08              >            php         ;save flags
11b3 : c901            >            cmp #1     ;test result
                       >            trap_ne
11b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11b7 : 68              >            pla         ;load status
11b8 : 48              >            pha
                       >            cmp_flag ~fv
11b9 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
11bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11bd : 28              >            plp         ;restore status
                        
11be : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
11bf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11c1 : 48              >            pha         ;use stack to load status
11c2 : a901            >            lda #1     ;precharge accu
11c4 : 28              >            plp
                        
11c5 : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
11c8 : 08              >            php         ;save flags
11c9 : c901            >            cmp #1     ;test result
                       >            trap_ne
11cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11cd : 68              >            pla         ;load status
11ce : 48              >            pha
                       >            cmp_flag ~fnz
11cf : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
11d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11d3 : 28              >            plp         ;restore status
                        
11d4 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
11d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11d7 : 48              >            pha         ;use stack to load status
11d8 : a9ff            >            lda #$ff     ;precharge accu
11da : 28              >            plp
                        
11db : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
11de : 08              >            php         ;save flags
11df : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
11e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11e3 : 68              >            pla         ;load status
11e4 : 48              >            pha
                       >            cmp_flag ~fnv 
11e5 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
11e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11e9 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
11ea : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
11ec : 48              >            pha         ;use stack to load status
11ed : a9ff            >            lda #$ff     ;precharge accu
11ef : 28              >            plp
                        
11f0 : 8900                     bit #$00    ;00 - should set Z
                                tst_a $ff,fz 
11f2 : 08              >            php         ;save flags
11f3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
11f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11f7 : 68              >            pla         ;load status
11f8 : 48              >            pha
                       >            cmp_flag fz 
11f9 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
11fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
11fd : 28              >            plp         ;restore status
                        
11fe : ca                       dex
                                set_a 1,0
                       >            load_flag 0
11ff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1201 : 48              >            pha         ;use stack to load status
1202 : a901            >            lda #1     ;precharge accu
1204 : 28              >            plp
                        
1205 : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,0
1207 : 08              >            php         ;save flags
1208 : c901            >            cmp #1     ;test result
                       >            trap_ne
120a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
120c : 68              >            pla         ;load status
120d : 48              >            pha
                       >            cmp_flag 0
120e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1210 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1212 : 28              >            plp         ;restore status
                        
                        ; *** DEBUG INFO ***
                        ; if it fails the previous test and your BIT # has set the V flag
                        ; see http://forum.6502.org/viewtopic.php?f=2&t=2241&p=27243#p27239
                        ; why it shouldn't alter N or V flags on a BIT #
1213 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1214 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1216 : 48              >            pha         ;use stack to load status
1217 : a901            >            lda #1     ;precharge accu
1219 : 28              >            plp
                        
121a : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,fz
121c : 08              >            php         ;save flags
121d : c901            >            cmp #1     ;test result
                       >            trap_ne
121f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1221 : 68              >            pla         ;load status
1222 : 48              >            pha
                       >            cmp_flag fz
1223 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1225 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1227 : 28              >            plp         ;restore status
                        
1228 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1229 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
122b : 48              >            pha         ;use stack to load status
122c : a901            >            lda #1     ;precharge accu
122e : 28              >            plp
                        
122f : 89c3                     bit #$c3    ;c3 - should clear Z
                                tst_a 1,0
1231 : 08              >            php         ;save flags
1232 : c901            >            cmp #1     ;test result
                       >            trap_ne
1234 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1236 : 68              >            pla         ;load status
1237 : 48              >            pha
                       >            cmp_flag 0
1238 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
123a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
123c : 28              >            plp         ;restore status
                        
                                
                                set_a 1,$ff
                       >            load_flag $ff
123d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
123f : 48              >            pha         ;use stack to load status
1240 : a901            >            lda #1     ;precharge accu
1242 : 28              >            plp
                        
1243 : 89c3                     bit #$c3    ;c3 - clear Z
                                tst_a 1,~fz
1245 : 08              >            php         ;save flags
1246 : c901            >            cmp #1     ;test result
                       >            trap_ne
1248 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
124a : 68              >            pla         ;load status
124b : 48              >            pha
                       >            cmp_flag ~fz
124c : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
124e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1250 : 28              >            plp         ;restore status
                        
1251 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
1252 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1254 : 48              >            pha         ;use stack to load status
1255 : a901            >            lda #1     ;precharge accu
1257 : 28              >            plp
                        
1258 : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,$ff
125a : 08              >            php         ;save flags
125b : c901            >            cmp #1     ;test result
                       >            trap_ne
125d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
125f : 68              >            pla         ;load status
1260 : 48              >            pha
                       >            cmp_flag $ff
1261 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1263 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1265 : 28              >            plp         ;restore status
                        
1266 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
1267 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1269 : 48              >            pha         ;use stack to load status
126a : a901            >            lda #1     ;precharge accu
126c : 28              >            plp
                        
126d : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,~fz
126f : 08              >            php         ;save flags
1270 : c901            >            cmp #1     ;test result
                       >            trap_ne
1272 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1274 : 68              >            pla         ;load status
1275 : 48              >            pha
                       >            cmp_flag ~fz
1276 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1278 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
127a : 28              >            plp         ;restore status
                        
127b : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
127c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
127e : 48              >            pha         ;use stack to load status
127f : a9ff            >            lda #$ff     ;precharge accu
1281 : 28              >            plp
                        
1282 : 8900                     bit #$00   ;00 - should set Z
                                tst_a $ff,$ff
1284 : 08              >            php         ;save flags
1285 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1287 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1289 : 68              >            pla         ;load status
128a : 48              >            pha
                       >            cmp_flag $ff
128b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
128d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
128f : 28              >            plp         ;restore status
                        
                                
1290 : e003                     cpx #3
                                trap_ne     ;x altered during test
1292 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1294 : c042                     cpy #$42
                                trap_ne     ;y altered during test 
1296 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1298 : ba                       tsx
1299 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
129b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
129d : ad0202          >            lda test_case   ;previous test
12a0 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
12a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
12a4 : a90f            >            lda #test_num   ;*** next tests' number
12a6 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing TRB, TSB - zp / abs
                        
                        trbt    macro       ;\1 = memory, \2 = flags   
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                trb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+3
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong       
                                endm
                        
                        tsbt    macro       ;\1 = memory, \2 = flags   
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                tsb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+4
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong        
                                endm
                        
12a9 : a2c0                     ldx #$c0
12ab : a000                     ldy #0      ;op1 - memory save
                                ;   zpt     ;op1 - memory modifiable
12ad : 640d                     stz zpt+1   ;op2 - accu
                                ;   zpt+2   ;and flags
                                ;   zpt+3   ;memory after reset
                                ;   zpt+4   ;memory after set
                                
12af : 98               tbt1    tya
12b0 : 250d                     and zpt+1   ;set Z by anding the 2 operands
12b2 : 08                       php
12b3 : 68                       pla
12b4 : 2902                     and #fz     ;mask Z
12b6 : 850e                     sta zpt+2
12b8 : 98                       tya         ;reset op1 bits by op2
12b9 : 49ff                     eor #$ff
12bb : 050d                     ora zpt+1
12bd : 49ff                     eor #$ff
12bf : 850f                     sta zpt+3
12c1 : 98                       tya         ;set op1 bits by op2
12c2 : 050d                     ora zpt+1
12c4 : 8510                     sta zpt+4
                        
                                trbt zpt,$ff
12c6 : 840c            >        sty zpt
                       >        load_flag $ff
12c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12ca : 48              >        pha
12cb : a50d            >        lda zpt+1
12cd : 28              >        plp
12ce : 140c            >        trb zpt
12d0 : 08              >        php
12d1 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
12d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12d5 : 68              >        pla
12d6 : 48              >        pha
12d7 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
12d9 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
12db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12dd : 68              >        pla
12de : 2902            >        and #fz
12e0 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
12e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12e4 : a50f            >        lda zpt+3
12e6 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
12e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt abst,$ff
12ea : 8c0502          >        sty abst
                       >        load_flag $ff
12ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12ef : 48              >        pha
12f0 : a50d            >        lda zpt+1
12f2 : 28              >        plp
12f3 : 1c0502          >        trb abst
12f6 : 08              >        php
12f7 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
12f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
12fb : 68              >        pla
12fc : 48              >        pha
12fd : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
12ff : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1301 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1303 : 68              >        pla
1304 : 2902            >        and #fz
1306 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
1308 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
130a : a50f            >        lda zpt+3
130c : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
130e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt zpt,0
1310 : 840c            >        sty zpt
                       >        load_flag 0
1312 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1314 : 48              >        pha
1315 : a50d            >        lda zpt+1
1317 : 28              >        plp
1318 : 140c            >        trb zpt
131a : 08              >        php
131b : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
131d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
131f : 68              >        pla
1320 : 48              >        pha
1321 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
1323 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1325 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1327 : 68              >        pla
1328 : 2902            >        and #fz
132a : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
132c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
132e : a50f            >        lda zpt+3
1330 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
1332 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                trbt abst,0
1334 : 8c0502          >        sty abst
                       >        load_flag 0
1337 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1339 : 48              >        pha
133a : a50d            >        lda zpt+1
133c : 28              >        plp
133d : 1c0502          >        trb abst
1340 : 08              >        php
1341 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
1343 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1345 : 68              >        pla
1346 : 48              >        pha
1347 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
1349 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
134b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
134d : 68              >        pla
134e : 2902            >        and #fz
1350 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
1352 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1354 : a50f            >        lda zpt+3
1356 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
1358 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt zpt,$ff
135a : 840c            >        sty zpt
                       >        load_flag $ff
135c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
135e : 48              >        pha
135f : a50d            >        lda zpt+1
1361 : 28              >        plp
1362 : 040c            >        tsb zpt
1364 : 08              >        php
1365 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
1367 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1369 : 68              >        pla
136a : 48              >        pha
136b : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
136d : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
136f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1371 : 68              >        pla
1372 : 2902            >        and #fz
1374 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
1376 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1378 : a510            >        lda zpt+4
137a : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
137c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt abst,$ff
137e : 8c0502          >        sty abst
                       >        load_flag $ff
1381 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1383 : 48              >        pha
1384 : a50d            >        lda zpt+1
1386 : 28              >        plp
1387 : 0c0502          >        tsb abst
138a : 08              >        php
138b : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
138d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
138f : 68              >        pla
1390 : 48              >        pha
1391 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
1393 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1395 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1397 : 68              >        pla
1398 : 2902            >        and #fz
139a : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
139c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
139e : a510            >        lda zpt+4
13a0 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
13a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt zpt,0
13a4 : 840c            >        sty zpt
                       >        load_flag 0
13a6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13a8 : 48              >        pha
13a9 : a50d            >        lda zpt+1
13ab : 28              >        plp
13ac : 040c            >        tsb zpt
13ae : 08              >        php
13af : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
13b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
13b3 : 68              >        pla
13b4 : 48              >        pha
13b5 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
13b7 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
13b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
13bb : 68              >        pla
13bc : 2902            >        and #fz
13be : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
13c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
13c2 : a510            >        lda zpt+4
13c4 : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
13c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                tsbt abst,0
13c8 : 8c0502          >        sty abst
                       >        load_flag 0
13cb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13cd : 48              >        pha
13ce : a50d            >        lda zpt+1
13d0 : 28              >        plp
13d1 : 0c0502          >        tsb abst
13d4 : 08              >        php
13d5 : c50d            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
13d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
13d9 : 68              >        pla
13da : 48              >        pha
13db : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
13dd : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
13df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
13e1 : 68              >        pla
13e2 : 2902            >        and #fz
13e4 : c50e            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
13e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
13e8 : a510            >        lda zpt+4
13ea : c50c            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
13ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                
13ee : c8                       iny         ;iterate op1
13ef : d004                     bne tbt3
13f1 : e60d                     inc zpt+1   ;iterate op2
13f3 : f003                     beq tbt2
13f5 : 4caf12           tbt3    jmp tbt1        
13f8 :                  tbt2
13f8 : e0c0                     cpx #$c0
                                trap_ne     ;x altered during test
13fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
13fc : ba                       tsx
13fd : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
13ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test    
1401 : ad0202          >            lda test_case   ;previous test
1404 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1406 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
1408 : a910            >            lda #test_num   ;*** next tests' number
140a : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing RMB, SMB - zp
                        rmbt    macro       ;\1 = bitnum
                                lda #$ff
                                sta zpt
                                set_a $a5,0
                                rmb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff-(1<<\1)
                                trap_ne     ;wrong bits set or cleared
                                lda #1<<\1
                                sta zpt
                                set_a $5a,$ff
                                rmb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                trap_ne     ;wrong bits set or cleared
                                endm
                        smbt    macro       ;\1 = bitnum
                                lda #$ff-(1<<\1)
                                sta zpt
                                set_a $a5,0
                                smb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff
                                trap_ne     ;wrong bits set or cleared
                                lda #0
                                sta zpt
                                set_a $5a,$ff
                                smb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                cmp #1<<\1
                                trap_ne     ;wrong bits set or cleared
                                endm
                        
140d : a2ba                     ldx #$ba    ;protect x & y
140f : a0d0                     ldy #$d0
                                rmbt 0
1411 : a9ff            >        lda #$ff
1413 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1415 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1417 : 48              >            pha         ;use stack to load status
1418 : a9a5            >            lda #$a5     ;precharge accu
141a : 28              >            plp
                       >
141b : 070c            >        rmb 0,zpt
                       >        tst_a $a5,0
141d : 08              >            php         ;save flags
141e : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1420 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1422 : 68              >            pla         ;load status
1423 : 48              >            pha
                       >            cmp_flag 0
1424 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1426 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1428 : 28              >            plp         ;restore status
                       >
1429 : a50c            >        lda zpt
142b : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne     ;wrong bits set or cleared
142d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
142f : a901            >        lda #1<<0
1431 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1433 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1435 : 48              >            pha         ;use stack to load status
1436 : a95a            >            lda #$5a     ;precharge accu
1438 : 28              >            plp
                       >
1439 : 070c            >        rmb 0,zpt
                       >        tst_a $5a,$ff
143b : 08              >            php         ;save flags
143c : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
143e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1440 : 68              >            pla         ;load status
1441 : 48              >            pha
                       >            cmp_flag $ff
1442 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1444 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1446 : 28              >            plp         ;restore status
                       >
1447 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1449 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 1
144b : a9ff            >        lda #$ff
144d : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
144f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1451 : 48              >            pha         ;use stack to load status
1452 : a9a5            >            lda #$a5     ;precharge accu
1454 : 28              >            plp
                       >
1455 : 170c            >        rmb 1,zpt
                       >        tst_a $a5,0
1457 : 08              >            php         ;save flags
1458 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
145a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
145c : 68              >            pla         ;load status
145d : 48              >            pha
                       >            cmp_flag 0
145e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1460 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1462 : 28              >            plp         ;restore status
                       >
1463 : a50c            >        lda zpt
1465 : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne     ;wrong bits set or cleared
1467 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1469 : a902            >        lda #1<<1
146b : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
146d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
146f : 48              >            pha         ;use stack to load status
1470 : a95a            >            lda #$5a     ;precharge accu
1472 : 28              >            plp
                       >
1473 : 170c            >        rmb 1,zpt
                       >        tst_a $5a,$ff
1475 : 08              >            php         ;save flags
1476 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1478 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
147a : 68              >            pla         ;load status
147b : 48              >            pha
                       >            cmp_flag $ff
147c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
147e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1480 : 28              >            plp         ;restore status
                       >
1481 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1483 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 2
1485 : a9ff            >        lda #$ff
1487 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1489 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
148b : 48              >            pha         ;use stack to load status
148c : a9a5            >            lda #$a5     ;precharge accu
148e : 28              >            plp
                       >
148f : 270c            >        rmb 2,zpt
                       >        tst_a $a5,0
1491 : 08              >            php         ;save flags
1492 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1494 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1496 : 68              >            pla         ;load status
1497 : 48              >            pha
                       >            cmp_flag 0
1498 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
149a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
149c : 28              >            plp         ;restore status
                       >
149d : a50c            >        lda zpt
149f : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne     ;wrong bits set or cleared
14a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14a3 : a904            >        lda #1<<2
14a5 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
14a7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14a9 : 48              >            pha         ;use stack to load status
14aa : a95a            >            lda #$5a     ;precharge accu
14ac : 28              >            plp
                       >
14ad : 270c            >        rmb 2,zpt
                       >        tst_a $5a,$ff
14af : 08              >            php         ;save flags
14b0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
14b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14b4 : 68              >            pla         ;load status
14b5 : 48              >            pha
                       >            cmp_flag $ff
14b6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14ba : 28              >            plp         ;restore status
                       >
14bb : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
14bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 3
14bf : a9ff            >        lda #$ff
14c1 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
14c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14c5 : 48              >            pha         ;use stack to load status
14c6 : a9a5            >            lda #$a5     ;precharge accu
14c8 : 28              >            plp
                       >
14c9 : 370c            >        rmb 3,zpt
                       >        tst_a $a5,0
14cb : 08              >            php         ;save flags
14cc : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
14ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14d0 : 68              >            pla         ;load status
14d1 : 48              >            pha
                       >            cmp_flag 0
14d2 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14d6 : 28              >            plp         ;restore status
                       >
14d7 : a50c            >        lda zpt
14d9 : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne     ;wrong bits set or cleared
14db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14dd : a908            >        lda #1<<3
14df : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
14e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14e3 : 48              >            pha         ;use stack to load status
14e4 : a95a            >            lda #$5a     ;precharge accu
14e6 : 28              >            plp
                       >
14e7 : 370c            >        rmb 3,zpt
                       >        tst_a $5a,$ff
14e9 : 08              >            php         ;save flags
14ea : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
14ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14ee : 68              >            pla         ;load status
14ef : 48              >            pha
                       >            cmp_flag $ff
14f0 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
14f4 : 28              >            plp         ;restore status
                       >
14f5 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
14f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 4
14f9 : a9ff            >        lda #$ff
14fb : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
14fd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14ff : 48              >            pha         ;use stack to load status
1500 : a9a5            >            lda #$a5     ;precharge accu
1502 : 28              >            plp
                       >
1503 : 470c            >        rmb 4,zpt
                       >        tst_a $a5,0
1505 : 08              >            php         ;save flags
1506 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1508 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
150a : 68              >            pla         ;load status
150b : 48              >            pha
                       >            cmp_flag 0
150c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
150e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1510 : 28              >            plp         ;restore status
                       >
1511 : a50c            >        lda zpt
1513 : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne     ;wrong bits set or cleared
1515 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1517 : a910            >        lda #1<<4
1519 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
151b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
151d : 48              >            pha         ;use stack to load status
151e : a95a            >            lda #$5a     ;precharge accu
1520 : 28              >            plp
                       >
1521 : 470c            >        rmb 4,zpt
                       >        tst_a $5a,$ff
1523 : 08              >            php         ;save flags
1524 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1526 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1528 : 68              >            pla         ;load status
1529 : 48              >            pha
                       >            cmp_flag $ff
152a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
152c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
152e : 28              >            plp         ;restore status
                       >
152f : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1531 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 5
1533 : a9ff            >        lda #$ff
1535 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1537 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1539 : 48              >            pha         ;use stack to load status
153a : a9a5            >            lda #$a5     ;precharge accu
153c : 28              >            plp
                       >
153d : 570c            >        rmb 5,zpt
                       >        tst_a $a5,0
153f : 08              >            php         ;save flags
1540 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1542 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1544 : 68              >            pla         ;load status
1545 : 48              >            pha
                       >            cmp_flag 0
1546 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1548 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
154a : 28              >            plp         ;restore status
                       >
154b : a50c            >        lda zpt
154d : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne     ;wrong bits set or cleared
154f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1551 : a920            >        lda #1<<5
1553 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1555 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1557 : 48              >            pha         ;use stack to load status
1558 : a95a            >            lda #$5a     ;precharge accu
155a : 28              >            plp
                       >
155b : 570c            >        rmb 5,zpt
                       >        tst_a $5a,$ff
155d : 08              >            php         ;save flags
155e : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1560 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1562 : 68              >            pla         ;load status
1563 : 48              >            pha
                       >            cmp_flag $ff
1564 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1566 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1568 : 28              >            plp         ;restore status
                       >
1569 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
156b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 6
156d : a9ff            >        lda #$ff
156f : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1571 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1573 : 48              >            pha         ;use stack to load status
1574 : a9a5            >            lda #$a5     ;precharge accu
1576 : 28              >            plp
                       >
1577 : 670c            >        rmb 6,zpt
                       >        tst_a $a5,0
1579 : 08              >            php         ;save flags
157a : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
157c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
157e : 68              >            pla         ;load status
157f : 48              >            pha
                       >            cmp_flag 0
1580 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1582 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1584 : 28              >            plp         ;restore status
                       >
1585 : a50c            >        lda zpt
1587 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne     ;wrong bits set or cleared
1589 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
158b : a940            >        lda #1<<6
158d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
158f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1591 : 48              >            pha         ;use stack to load status
1592 : a95a            >            lda #$5a     ;precharge accu
1594 : 28              >            plp
                       >
1595 : 670c            >        rmb 6,zpt
                       >        tst_a $5a,$ff
1597 : 08              >            php         ;save flags
1598 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
159a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
159c : 68              >            pla         ;load status
159d : 48              >            pha
                       >            cmp_flag $ff
159e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15a2 : 28              >            plp         ;restore status
                       >
15a3 : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
15a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                rmbt 7
15a7 : a9ff            >        lda #$ff
15a9 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
15ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15ad : 48              >            pha         ;use stack to load status
15ae : a9a5            >            lda #$a5     ;precharge accu
15b0 : 28              >            plp
                       >
15b1 : 770c            >        rmb 7,zpt
                       >        tst_a $a5,0
15b3 : 08              >            php         ;save flags
15b4 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
15b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15b8 : 68              >            pla         ;load status
15b9 : 48              >            pha
                       >            cmp_flag 0
15ba : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15be : 28              >            plp         ;restore status
                       >
15bf : a50c            >        lda zpt
15c1 : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne     ;wrong bits set or cleared
15c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15c5 : a980            >        lda #1<<7
15c7 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
15c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15cb : 48              >            pha         ;use stack to load status
15cc : a95a            >            lda #$5a     ;precharge accu
15ce : 28              >            plp
                       >
15cf : 770c            >        rmb 7,zpt
                       >        tst_a $5a,$ff
15d1 : 08              >            php         ;save flags
15d2 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
15d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15d6 : 68              >            pla         ;load status
15d7 : 48              >            pha
                       >            cmp_flag $ff
15d8 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15dc : 28              >            plp         ;restore status
                       >
15dd : a50c            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
15df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 0
15e1 : a9fe            >        lda #$ff-(1<<0)
15e3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
15e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15e7 : 48              >            pha         ;use stack to load status
15e8 : a9a5            >            lda #$a5     ;precharge accu
15ea : 28              >            plp
                       >
15eb : 870c            >        smb 0,zpt
                       >        tst_a $a5,0
15ed : 08              >            php         ;save flags
15ee : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
15f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15f2 : 68              >            pla         ;load status
15f3 : 48              >            pha
                       >            cmp_flag 0
15f4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15f8 : 28              >            plp         ;restore status
                       >
15f9 : a50c            >        lda zpt
15fb : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
15fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
15ff : a900            >        lda #0
1601 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1603 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1605 : 48              >            pha         ;use stack to load status
1606 : a95a            >            lda #$5a     ;precharge accu
1608 : 28              >            plp
                       >
1609 : 870c            >        smb 0,zpt
                       >        tst_a $5a,$ff
160b : 08              >            php         ;save flags
160c : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
160e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1610 : 68              >            pla         ;load status
1611 : 48              >            pha
                       >            cmp_flag $ff
1612 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1614 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1616 : 28              >            plp         ;restore status
                       >
1617 : a50c            >        lda zpt
1619 : c901            >        cmp #1<<0
                       >        trap_ne     ;wrong bits set or cleared
161b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 1
161d : a9fd            >        lda #$ff-(1<<1)
161f : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1621 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1623 : 48              >            pha         ;use stack to load status
1624 : a9a5            >            lda #$a5     ;precharge accu
1626 : 28              >            plp
                       >
1627 : 970c            >        smb 1,zpt
                       >        tst_a $a5,0
1629 : 08              >            php         ;save flags
162a : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
162c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
162e : 68              >            pla         ;load status
162f : 48              >            pha
                       >            cmp_flag 0
1630 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1632 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1634 : 28              >            plp         ;restore status
                       >
1635 : a50c            >        lda zpt
1637 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1639 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
163b : a900            >        lda #0
163d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
163f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1641 : 48              >            pha         ;use stack to load status
1642 : a95a            >            lda #$5a     ;precharge accu
1644 : 28              >            plp
                       >
1645 : 970c            >        smb 1,zpt
                       >        tst_a $5a,$ff
1647 : 08              >            php         ;save flags
1648 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
164a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
164c : 68              >            pla         ;load status
164d : 48              >            pha
                       >            cmp_flag $ff
164e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1650 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1652 : 28              >            plp         ;restore status
                       >
1653 : a50c            >        lda zpt
1655 : c902            >        cmp #1<<1
                       >        trap_ne     ;wrong bits set or cleared
1657 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 2
1659 : a9fb            >        lda #$ff-(1<<2)
165b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
165d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
165f : 48              >            pha         ;use stack to load status
1660 : a9a5            >            lda #$a5     ;precharge accu
1662 : 28              >            plp
                       >
1663 : a70c            >        smb 2,zpt
                       >        tst_a $a5,0
1665 : 08              >            php         ;save flags
1666 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1668 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
166a : 68              >            pla         ;load status
166b : 48              >            pha
                       >            cmp_flag 0
166c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
166e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1670 : 28              >            plp         ;restore status
                       >
1671 : a50c            >        lda zpt
1673 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1675 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1677 : a900            >        lda #0
1679 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
167b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
167d : 48              >            pha         ;use stack to load status
167e : a95a            >            lda #$5a     ;precharge accu
1680 : 28              >            plp
                       >
1681 : a70c            >        smb 2,zpt
                       >        tst_a $5a,$ff
1683 : 08              >            php         ;save flags
1684 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1686 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1688 : 68              >            pla         ;load status
1689 : 48              >            pha
                       >            cmp_flag $ff
168a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
168c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
168e : 28              >            plp         ;restore status
                       >
168f : a50c            >        lda zpt
1691 : c904            >        cmp #1<<2
                       >        trap_ne     ;wrong bits set or cleared
1693 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 3
1695 : a9f7            >        lda #$ff-(1<<3)
1697 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1699 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
169b : 48              >            pha         ;use stack to load status
169c : a9a5            >            lda #$a5     ;precharge accu
169e : 28              >            plp
                       >
169f : b70c            >        smb 3,zpt
                       >        tst_a $a5,0
16a1 : 08              >            php         ;save flags
16a2 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
16a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16a6 : 68              >            pla         ;load status
16a7 : 48              >            pha
                       >            cmp_flag 0
16a8 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ac : 28              >            plp         ;restore status
                       >
16ad : a50c            >        lda zpt
16af : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
16b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16b3 : a900            >        lda #0
16b5 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
16b7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16b9 : 48              >            pha         ;use stack to load status
16ba : a95a            >            lda #$5a     ;precharge accu
16bc : 28              >            plp
                       >
16bd : b70c            >        smb 3,zpt
                       >        tst_a $5a,$ff
16bf : 08              >            php         ;save flags
16c0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
16c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16c4 : 68              >            pla         ;load status
16c5 : 48              >            pha
                       >            cmp_flag $ff
16c6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ca : 28              >            plp         ;restore status
                       >
16cb : a50c            >        lda zpt
16cd : c908            >        cmp #1<<3
                       >        trap_ne     ;wrong bits set or cleared
16cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 4
16d1 : a9ef            >        lda #$ff-(1<<4)
16d3 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
16d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
16d7 : 48              >            pha         ;use stack to load status
16d8 : a9a5            >            lda #$a5     ;precharge accu
16da : 28              >            plp
                       >
16db : c70c            >        smb 4,zpt
                       >        tst_a $a5,0
16dd : 08              >            php         ;save flags
16de : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
16e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16e2 : 68              >            pla         ;load status
16e3 : 48              >            pha
                       >            cmp_flag 0
16e4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
16e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16e8 : 28              >            plp         ;restore status
                       >
16e9 : a50c            >        lda zpt
16eb : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
16ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
16ef : a900            >        lda #0
16f1 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
16f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16f5 : 48              >            pha         ;use stack to load status
16f6 : a95a            >            lda #$5a     ;precharge accu
16f8 : 28              >            plp
                       >
16f9 : c70c            >        smb 4,zpt
                       >        tst_a $5a,$ff
16fb : 08              >            php         ;save flags
16fc : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
16fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1700 : 68              >            pla         ;load status
1701 : 48              >            pha
                       >            cmp_flag $ff
1702 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1704 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1706 : 28              >            plp         ;restore status
                       >
1707 : a50c            >        lda zpt
1709 : c910            >        cmp #1<<4
                       >        trap_ne     ;wrong bits set or cleared
170b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 5
170d : a9df            >        lda #$ff-(1<<5)
170f : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1711 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1713 : 48              >            pha         ;use stack to load status
1714 : a9a5            >            lda #$a5     ;precharge accu
1716 : 28              >            plp
                       >
1717 : d70c            >        smb 5,zpt
                       >        tst_a $a5,0
1719 : 08              >            php         ;save flags
171a : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
171c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
171e : 68              >            pla         ;load status
171f : 48              >            pha
                       >            cmp_flag 0
1720 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1722 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1724 : 28              >            plp         ;restore status
                       >
1725 : a50c            >        lda zpt
1727 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1729 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
172b : a900            >        lda #0
172d : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
172f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1731 : 48              >            pha         ;use stack to load status
1732 : a95a            >            lda #$5a     ;precharge accu
1734 : 28              >            plp
                       >
1735 : d70c            >        smb 5,zpt
                       >        tst_a $5a,$ff
1737 : 08              >            php         ;save flags
1738 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
173a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
173c : 68              >            pla         ;load status
173d : 48              >            pha
                       >            cmp_flag $ff
173e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1740 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1742 : 28              >            plp         ;restore status
                       >
1743 : a50c            >        lda zpt
1745 : c920            >        cmp #1<<5
                       >        trap_ne     ;wrong bits set or cleared
1747 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 6
1749 : a9bf            >        lda #$ff-(1<<6)
174b : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
174d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
174f : 48              >            pha         ;use stack to load status
1750 : a9a5            >            lda #$a5     ;precharge accu
1752 : 28              >            plp
                       >
1753 : e70c            >        smb 6,zpt
                       >        tst_a $a5,0
1755 : 08              >            php         ;save flags
1756 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1758 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
175a : 68              >            pla         ;load status
175b : 48              >            pha
                       >            cmp_flag 0
175c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
175e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1760 : 28              >            plp         ;restore status
                       >
1761 : a50c            >        lda zpt
1763 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1765 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1767 : a900            >        lda #0
1769 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
176b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
176d : 48              >            pha         ;use stack to load status
176e : a95a            >            lda #$5a     ;precharge accu
1770 : 28              >            plp
                       >
1771 : e70c            >        smb 6,zpt
                       >        tst_a $5a,$ff
1773 : 08              >            php         ;save flags
1774 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1776 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1778 : 68              >            pla         ;load status
1779 : 48              >            pha
                       >            cmp_flag $ff
177a : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
177c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
177e : 28              >            plp         ;restore status
                       >
177f : a50c            >        lda zpt
1781 : c940            >        cmp #1<<6
                       >        trap_ne     ;wrong bits set or cleared
1783 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
                                smbt 7
1785 : a97f            >        lda #$ff-(1<<7)
1787 : 850c            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1789 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
178b : 48              >            pha         ;use stack to load status
178c : a9a5            >            lda #$a5     ;precharge accu
178e : 28              >            plp
                       >
178f : f70c            >        smb 7,zpt
                       >        tst_a $a5,0
1791 : 08              >            php         ;save flags
1792 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1796 : 68              >            pla         ;load status
1797 : 48              >            pha
                       >            cmp_flag 0
1798 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
179a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
179c : 28              >            plp         ;restore status
                       >
179d : a50c            >        lda zpt
179f : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
17a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17a3 : a900            >        lda #0
17a5 : 850c            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
17a7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17a9 : 48              >            pha         ;use stack to load status
17aa : a95a            >            lda #$5a     ;precharge accu
17ac : 28              >            plp
                       >
17ad : f70c            >        smb 7,zpt
                       >        tst_a $5a,$ff
17af : 08              >            php         ;save flags
17b0 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
17b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17b4 : 68              >            pla         ;load status
17b5 : 48              >            pha
                       >            cmp_flag $ff
17b6 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17ba : 28              >            plp         ;restore status
                       >
17bb : a50c            >        lda zpt
17bd : c980            >        cmp #1<<7
                       >        trap_ne     ;wrong bits set or cleared
17bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
17c1 : e0ba                     cpx #$ba
                                trap_ne     ;x altered during test
17c3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17c5 : c0d0                     cpy #$d0
                                trap_ne     ;y altered during test
17c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17c9 : ba                       tsx
17ca : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
17cc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
17ce : ad0202          >            lda test_case   ;previous test
17d1 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
17d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
17d5 : a911            >            lda #test_num   ;*** next tests' number
17d7 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                            endif        
                                 
                        ; testing CMP - (zp)         
17da : a2de                     ldx #$de    ;protect x & y
17dc : a0ad                     ldy #$ad
                                set_a $80,0
                       >            load_flag 0
17de : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17e0 : 48              >            pha         ;use stack to load status
17e1 : a980            >            lda #$80     ;precharge accu
17e3 : 28              >            plp
                        
17e4 : d22c                     cmp (ind1+8)
                                tst_a $80,fc
17e6 : 08              >            php         ;save flags
17e7 : c980            >            cmp #$80     ;test result
                       >            trap_ne
17e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17eb : 68              >            pla         ;load status
17ec : 48              >            pha
                       >            cmp_flag fc
17ed : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17f1 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
17f2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17f4 : 48              >            pha         ;use stack to load status
17f5 : a97f            >            lda #$7f     ;precharge accu
17f7 : 28              >            plp
                        
17f8 : d22c                     cmp (ind1+8)
                                tst_a $7f,fzc
17fa : 08              >            php         ;save flags
17fb : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
17fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
17ff : 68              >            pla         ;load status
1800 : 48              >            pha
                       >            cmp_flag fzc
1801 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1803 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1805 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
1806 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1808 : 48              >            pha         ;use stack to load status
1809 : a97e            >            lda #$7e     ;precharge accu
180b : 28              >            plp
                        
180c : d22c                     cmp (ind1+8)
                                tst_a $7e,fn
180e : 08              >            php         ;save flags
180f : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
1811 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1813 : 68              >            pla         ;load status
1814 : 48              >            pha
                       >            cmp_flag fn
1815 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1817 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1819 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
181a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
181c : 48              >            pha         ;use stack to load status
181d : a980            >            lda #$80     ;precharge accu
181f : 28              >            plp
                        
1820 : d22c                     cmp (ind1+8)
                                tst_a $80,~fnz
1822 : 08              >            php         ;save flags
1823 : c980            >            cmp #$80     ;test result
                       >            trap_ne
1825 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1827 : 68              >            pla         ;load status
1828 : 48              >            pha
                       >            cmp_flag ~fnz
1829 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
182b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
182d : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
182e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1830 : 48              >            pha         ;use stack to load status
1831 : a97f            >            lda #$7f     ;precharge accu
1833 : 28              >            plp
                        
1834 : d22c                     cmp (ind1+8)
                                tst_a $7f,~fn
1836 : 08              >            php         ;save flags
1837 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
1839 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
183b : 68              >            pla         ;load status
183c : 48              >            pha
                       >            cmp_flag ~fn
183d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
183f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1841 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
1842 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1844 : 48              >            pha         ;use stack to load status
1845 : a97e            >            lda #$7e     ;precharge accu
1847 : 28              >            plp
                        
1848 : d22c                     cmp (ind1+8)
                                tst_a $7e,~fzc
184a : 08              >            php         ;save flags
184b : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
184d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
184f : 68              >            pla         ;load status
1850 : 48              >            pha
                       >            cmp_flag ~fzc
1851 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1853 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1855 : 28              >            plp         ;restore status
                        
1856 : e0de                     cpx #$de
                                trap_ne     ;x altered during test
1858 : d0fe            >        bne *           ;failed not equal (non zero)
                        
185a : c0ad                     cpy #$ad
                                trap_ne     ;y altered during test 
185c : d0fe            >        bne *           ;failed not equal (non zero)
                        
185e : ba                       tsx
185f : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1861 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
1863 : ad0202          >            lda test_case   ;previous test
1866 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1868 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
186a : a912            >            lda #test_num   ;*** next tests' number
186c : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA (zp)
186f : a242                     ldx #$42    ;protect x & y
                        
1871 : a000                     ldy #0      ;AND
1873 : a53a                     lda indAN   ;set indirect address
1875 : 850c                     sta zpt
1877 : a53b                     lda indAN+1
1879 : 850d                     sta zpt+1
187b :                  tand1
                                set_ay  absANa,0
                       >            load_flag 0
187b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
187d : 48              >            pha         ;use stack to load status
187e : b95302          >            lda absANa,y    ;precharge accu
1881 : 28              >            plp
                        
1882 : 320c                     and (zpt)
                                tst_ay  absrlo,absflo,0
1884 : 08              >            php         ;save flags
1885 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1888 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
188a : 68              >            pla         ;load status
                       >            eor_flag 0
188b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
188d : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1890 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
1892 : e60c                     inc zpt
1894 : c8                       iny
1895 : c004                     cpy #4
1897 : d0e2                     bne tand1
1899 : 88                       dey
189a : c60c                     dec zpt
189c :                  tand2
                                set_ay  absANa,$ff
                       >            load_flag $ff
189c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
189e : 48              >            pha         ;use stack to load status
189f : b95302          >            lda absANa,y    ;precharge accu
18a2 : 28              >            plp
                        
18a3 : 320c                     and (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
18a5 : 08              >            php         ;save flags
18a6 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
18a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
18ab : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
18ac : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
18ae : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
18b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
18b3 : c60c                     dec zpt
18b5 : 88                       dey
18b6 : 10e4                     bpl tand2
                        
18b8 : a000                     ldy #0      ;EOR
18ba : a542                     lda indEO   ;set indirect address
18bc : 850c                     sta zpt
18be : a543                     lda indEO+1
18c0 : 850d                     sta zpt+1
18c2 :                  teor1
                                set_ay  absEOa,0
                       >            load_flag 0
18c2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18c4 : 48              >            pha         ;use stack to load status
18c5 : b95702          >            lda absEOa,y    ;precharge accu
18c8 : 28              >            plp
                        
18c9 : 520c                     eor (zpt)
                                tst_ay  absrlo,absflo,0
18cb : 08              >            php         ;save flags
18cc : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
18cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
18d1 : 68              >            pla         ;load status
                       >            eor_flag 0
18d2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
18d4 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
18d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
18d9 : e60c                     inc zpt
18db : c8                       iny
18dc : c004                     cpy #4
18de : d0e2                     bne teor1
18e0 : 88                       dey
18e1 : c60c                     dec zpt
18e3 :                  teor2
                                set_ay  absEOa,$ff
                       >            load_flag $ff
18e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18e5 : 48              >            pha         ;use stack to load status
18e6 : b95702          >            lda absEOa,y    ;precharge accu
18e9 : 28              >            plp
                        
18ea : 520c                     eor (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
18ec : 08              >            php         ;save flags
18ed : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
18f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
18f2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
18f3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
18f5 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
18f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
18fa : c60c                     dec zpt
18fc : 88                       dey
18fd : 10e4                     bpl teor2
                        
18ff : a000                     ldy #0      ;ORA
1901 : a54a                     lda indOR   ;set indirect address
1903 : 850c                     sta zpt
1905 : a54b                     lda indOR+1
1907 : 850d                     sta zpt+1
1909 :                  tora1
                                set_ay  absORa,0
                       >            load_flag 0
1909 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
190b : 48              >            pha         ;use stack to load status
190c : b94f02          >            lda absORa,y    ;precharge accu
190f : 28              >            plp
                        
1910 : 120c                     ora (zpt)
                                tst_ay  absrlo,absflo,0
1912 : 08              >            php         ;save flags
1913 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1916 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1918 : 68              >            pla         ;load status
                       >            eor_flag 0
1919 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
191b : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
191e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
1920 : e60c                     inc zpt
1922 : c8                       iny
1923 : c004                     cpy #4
1925 : d0e2                     bne tora1
1927 : 88                       dey
1928 : c60c                     dec zpt
192a :                  tora2
                                set_ay  absORa,$ff
                       >            load_flag $ff
192a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
192c : 48              >            pha         ;use stack to load status
192d : b94f02          >            lda absORa,y    ;precharge accu
1930 : 28              >            plp
                        
1931 : 120c                     ora (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
1933 : 08              >            php         ;save flags
1934 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1937 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1939 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
193a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
193c : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
193f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
1941 : c60c                     dec zpt
1943 : 88                       dey
1944 : 10e4                     bpl tora2
                        
1946 : e042                     cpx #$42
                                trap_ne     ;x altered during test
1948 : d0fe            >        bne *           ;failed not equal (non zero)
                        
194a : ba                       tsx
194b : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
194d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
194f : ad0202          >            lda test_case   ;previous test
1952 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1954 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
1956 : a913            >            lda #test_num   ;*** next tests' number
1958 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                            if I_flag = 3
195b : 58                       cli
                            endif                
                        
                        ; full binary add/subtract test - (zp) only
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
195c : d8                       cld
195d : a20e                     ldx #ad2        ;for indexed test
195f : a0ff                     ldy #$ff        ;max range
1961 : a900                     lda #0          ;start with adding zeroes & no carry
1963 : 850c                     sta adfc        ;carry in - for diag
1965 : 850d                     sta ad1         ;operand 1 - accumulator
1967 : 850e                     sta ad2         ;operand 2 - memory or immediate
1969 : 8d0502                   sta ada2        ;non zp
196c : 850f                     sta adrl        ;expected result bits 0-7
196e : 8510                     sta adrh        ;expected result bit 8 (carry out)
1970 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
1972 : 8512                     sta sb2
1974 : 8d0602                   sta sba2        ;non zp
1977 : a902                     lda #2          ;expected Z-flag
1979 : 8511                     sta adrf
197b : 18               tadd    clc             ;test with carry clear
197c : 20f31b                   jsr chkadd
197f : e60c                     inc adfc        ;now with carry
1981 : e60f                     inc adrl        ;result +1
1983 : 08                       php             ;save N & Z from low result
1984 : 08                       php
1985 : 68                       pla             ;accu holds expected flags
1986 : 2982                     and #$82        ;mask N & Z
1988 : 28                       plp
1989 : d002                     bne tadd1
198b : e610                     inc adrh        ;result bit 8 - carry
198d : 0510             tadd1   ora adrh        ;merge C to expected flags
198f : 8511                     sta adrf        ;save expected flags except overflow
1991 : 38                       sec             ;test with carry set
1992 : 20f31b                   jsr chkadd
1995 : c60c                     dec adfc        ;same for operand +1 but no carry
1997 : e60d                     inc ad1
1999 : d0e0                     bne tadd        ;iterate op1
199b : a900                     lda #0          ;preset result to op2 when op1 = 0
199d : 8510                     sta adrh
199f : ee0502                   inc ada2
19a2 : e60e                     inc ad2
19a4 : 08                       php             ;save NZ as operand 2 becomes the new result
19a5 : 68                       pla
19a6 : 2982                     and #$82        ;mask N00000Z0
19a8 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
19aa : c612                     dec sb2         ;complement subtract operand 2
19ac : ce0602                   dec sba2
19af : a50e                     lda ad2         
19b1 : 850f                     sta adrl
19b3 : d0c6                     bne tadd        ;iterate op2
                        
19b5 : e00e                     cpx #ad2
                                trap_ne         ;x altered during test
19b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19b9 : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test 
19bb : d0fe            >        bne *           ;failed not equal (non zero)
                        
19bd : ba                       tsx
19be : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
19c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
19c2 : ad0202          >            lda test_case   ;previous test
19c5 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
19c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
19c9 : a914            >            lda #test_num   ;*** next tests' number
19cb : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, the V flag is ignored
                        ;   although V is declared as beeing valid on the 65C02 it has absolutely
                        ;   no use in BCD math. No sign = no overflow!
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
19ce : f8                       sed 
19cf : a20e                     ldx #ad2        ;for indexed test
19d1 : a0ff                     ldy #$ff        ;max range
19d3 : a999                     lda #$99        ;start with adding 99 to 99 with carry
19d5 : 850d                     sta ad1         ;operand 1 - accumulator
19d7 : 850e                     sta ad2         ;operand 2 - memory or immediate
19d9 : 8d0502                   sta ada2        ;non zp
19dc : 850f                     sta adrl        ;expected result bits 0-7
19de : a901                     lda #1          ;set carry in & out
19e0 : 850c                     sta adfc        ;carry in - for diag
19e2 : 8510                     sta adrh        ;expected result bit 8 (carry out)
19e4 : a981                     lda #$81        ;set N & C (99 + 99 + C = 99 + C)
19e6 : 8511                     sta adrf
19e8 : a900                     lda #0          ;complemented operand 2 for subtract
19ea : 8512                     sta sb2
19ec : 8d0602                   sta sba2        ;non zp
19ef : 38               tdad    sec             ;test with carry set
19f0 : 209c1a                   jsr chkdad
19f3 : c60c                     dec adfc        ;now with carry clear
19f5 : a50f                     lda adrl        ;decimal adjust result
19f7 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
19f9 : c610                     dec adrh
19fb : a999                     lda #$99
19fd : 850f                     sta adrl
19ff : d012                     bne tdad3
1a01 : 290f             tdad1   and #$f         ;lower nibble mask
1a03 : d00c                     bne tdad2       ;no decimal adjust needed
1a05 : c60f                     dec adrl        ;decimal adjust (?0-6)
1a07 : c60f                     dec adrl
1a09 : c60f                     dec adrl
1a0b : c60f                     dec adrl
1a0d : c60f                     dec adrl
1a0f : c60f                     dec adrl
1a11 : c60f             tdad2   dec adrl        ;result -1
1a13 : 08               tdad3   php             ;save valid flags
1a14 : 68                       pla
1a15 : 2982                     and #$82        ;N-----Z-
1a17 : 0510                     ora adrh        ;N-----ZC
1a19 : 8511                     sta adrf
1a1b : 18                       clc             ;test with carry clear
1a1c : 209c1a                   jsr chkdad
1a1f : e60c                     inc adfc        ;same for operand -1 but with carry
1a21 : a50d                     lda ad1         ;decimal adjust operand 1
1a23 : f015                     beq tdad5       ;iterate operand 2
1a25 : 290f                     and #$f         ;lower nibble mask
1a27 : d00c                     bne tdad4       ;skip decimal adjust
1a29 : c60d                     dec ad1         ;decimal adjust (?0-6)
1a2b : c60d                     dec ad1
1a2d : c60d                     dec ad1
1a2f : c60d                     dec ad1
1a31 : c60d                     dec ad1
1a33 : c60d                     dec ad1
1a35 : c60d             tdad4   dec ad1         ;operand 1 -1
1a37 : 4cef19                   jmp tdad        ;iterate op1
                        
1a3a : a999             tdad5   lda #$99        ;precharge op1 max
1a3c : 850d                     sta ad1
1a3e : a50e                     lda ad2         ;decimal adjust operand 2
1a40 : f039                     beq tdad7       ;end of iteration
1a42 : 290f                     and #$f         ;lower nibble mask
1a44 : d018                     bne tdad6       ;skip decimal adjust
1a46 : c60e                     dec ad2         ;decimal adjust (?0-6)
1a48 : c60e                     dec ad2
1a4a : c60e                     dec ad2
1a4c : c60e                     dec ad2
1a4e : c60e                     dec ad2
1a50 : c60e                     dec ad2
1a52 : e612                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
1a54 : e612                     inc sb2
1a56 : e612                     inc sb2
1a58 : e612                     inc sb2
1a5a : e612                     inc sb2
1a5c : e612                     inc sb2
1a5e : c60e             tdad6   dec ad2         ;operand 2 -1
1a60 : e612                     inc sb2         ;complemented operand for subtract
1a62 : a512                     lda sb2
1a64 : 8d0602                   sta sba2        ;copy as non zp operand
1a67 : a50e                     lda ad2
1a69 : 8d0502                   sta ada2        ;copy as non zp operand
1a6c : 850f                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
1a6e : 08                       php             ;save flags
1a6f : 68                       pla
1a70 : 2982                     and #$82        ;N-----Z-
1a72 : 0901                     ora #1          ;N-----ZC
1a74 : 8511                     sta adrf
1a76 : e610                     inc adrh        ;result carry
1a78 : 4cef19                   jmp tdad        ;iterate op2
                        
1a7b : e00e             tdad7   cpx #ad2
                                trap_ne         ;x altered during test
1a7d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a7f : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test 
1a81 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a83 : ba                       tsx
1a84 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
1a86 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a88 : d8                       cld
                        
1a89 : ad0202                   lda test_case
1a8c : c914                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
1a8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a90 : a9f0                     lda #$f0        ;mark opcode testing complete
1a92 : 8d0202                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to 
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************       
                        ; -------------       
                                success         ;if you get here everything went well
1a95 : db              >		db $db
1a96 : 4c961a          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************       
1a99 : 4c0004                   jmp start       ;run again      
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, V flag is ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
1a9c :                  chkdad
                        ; decimal ADC / SBC zp
1a9c : 08                       php             ;save carry for subtract
1a9d : a50d                     lda ad1
1a9f : 650e                     adc ad2         ;perform add
1aa1 : 08                       php          
1aa2 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1aa4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1aa6 : 68                       pla             ;check flags
1aa7 : 2983                     and #$83        ;mask N-----ZC
1aa9 : c511                     cmp adrf
                                trap_ne         ;bad flags
1aab : d0fe            >        bne *           ;failed not equal (non zero)
                        
1aad : 28                       plp
1aae : 08                       php             ;save carry for next add
1aaf : a50d                     lda ad1
1ab1 : e512                     sbc sb2         ;perform subtract
1ab3 : 08                       php          
1ab4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1ab6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ab8 : 68                       pla             ;check flags
1ab9 : 2983                     and #$83        ;mask N-----ZC
1abb : c511                     cmp adrf
                                trap_ne         ;bad flags
1abd : d0fe            >        bne *           ;failed not equal (non zero)
                        
1abf : 28                       plp
                        ; decimal ADC / SBC abs
1ac0 : 08                       php             ;save carry for subtract
1ac1 : a50d                     lda ad1
1ac3 : 6d0502                   adc ada2        ;perform add
1ac6 : 08                       php          
1ac7 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1ac9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1acb : 68                       pla             ;check flags
1acc : 2983                     and #$83        ;mask N-----ZC
1ace : c511                     cmp adrf
                                trap_ne         ;bad flags
1ad0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ad2 : 28                       plp
1ad3 : 08                       php             ;save carry for next add
1ad4 : a50d                     lda ad1
1ad6 : ed0602                   sbc sba2        ;perform subtract
1ad9 : 08                       php          
1ada : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1adc : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ade : 68                       pla             ;check flags
1adf : 2983                     and #$83        ;mask N-----ZC
1ae1 : c511                     cmp adrf
                                trap_ne         ;bad flags
1ae3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ae5 : 28                       plp
                        ; decimal ADC / SBC #
1ae6 : 08                       php             ;save carry for subtract
1ae7 : a50e                     lda ad2
1ae9 : 8d0b02                   sta ex_adci+1   ;set ADC # operand
1aec : a50d                     lda ad1
1aee : 200a02                   jsr ex_adci     ;execute ADC # in RAM
1af1 : 08                       php          
1af2 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1af4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1af6 : 68                       pla             ;check flags
1af7 : 2983                     and #$83        ;mask N-----ZC
1af9 : c511                     cmp adrf
                                trap_ne         ;bad flags
1afb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1afd : 28                       plp
1afe : 08                       php             ;save carry for next add
1aff : a512                     lda sb2
1b01 : 8d0e02                   sta ex_sbci+1   ;set SBC # operand
1b04 : a50d                     lda ad1
1b06 : 200d02                   jsr ex_sbci     ;execute SBC # in RAM
1b09 : 08                       php          
1b0a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b0e : 68                       pla             ;check flags
1b0f : 2983                     and #$83        ;mask N-----ZC
1b11 : c511                     cmp adrf
                                trap_ne         ;bad flags
1b13 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b15 : 28                       plp
                        ; decimal ADC / SBC zp,x
1b16 : 08                       php             ;save carry for subtract
1b17 : a50d                     lda ad1
1b19 : 7500                     adc 0,x         ;perform add
1b1b : 08                       php          
1b1c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b1e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b20 : 68                       pla             ;check flags
1b21 : 2983                     and #$83        ;mask N-----ZC
1b23 : c511                     cmp adrf
                                trap_ne         ;bad flags
1b25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b27 : 28                       plp
1b28 : 08                       php             ;save carry for next add
1b29 : a50d                     lda ad1
1b2b : f504                     sbc sb2-ad2,x   ;perform subtract
1b2d : 08                       php          
1b2e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b30 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b32 : 68                       pla             ;check flags
1b33 : 2983                     and #$83        ;mask N-----ZC
1b35 : c511                     cmp adrf
                                trap_ne         ;bad flags
1b37 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b39 : 28                       plp
                        ; decimal ADC / SBC abs,x
1b3a : 08                       php             ;save carry for subtract
1b3b : a50d                     lda ad1
1b3d : 7df701                   adc ada2-ad2,x  ;perform add
1b40 : 08                       php          
1b41 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b45 : 68                       pla             ;check flags
1b46 : 2983                     and #$83        ;mask N-----ZC
1b48 : c511                     cmp adrf
                                trap_ne         ;bad flags
1b4a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b4c : 28                       plp
1b4d : 08                       php             ;save carry for next add
1b4e : a50d                     lda ad1
1b50 : fdf801                   sbc sba2-ad2,x  ;perform subtract
1b53 : 08                       php          
1b54 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b56 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b58 : 68                       pla             ;check flags
1b59 : 2983                     and #$83        ;mask N-----ZC
1b5b : c511                     cmp adrf
                                trap_ne         ;bad flags
1b5d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b5f : 28                       plp
                        ; decimal ADC / SBC abs,y
1b60 : 08                       php             ;save carry for subtract
1b61 : a50d                     lda ad1
1b63 : 790601                   adc ada2-$ff,y  ;perform add
1b66 : 08                       php          
1b67 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b69 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b6b : 68                       pla             ;check flags
1b6c : 2983                     and #$83        ;mask N-----ZC
1b6e : c511                     cmp adrf
                                trap_ne         ;bad flags
1b70 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b72 : 28                       plp
1b73 : 08                       php             ;save carry for next add
1b74 : a50d                     lda ad1
1b76 : f90701                   sbc sba2-$ff,y  ;perform subtract
1b79 : 08                       php          
1b7a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b7c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b7e : 68                       pla             ;check flags
1b7f : 2983                     and #$83        ;mask N-----ZC
1b81 : c511                     cmp adrf
                                trap_ne         ;bad flags
1b83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b85 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
1b86 : 08                       php             ;save carry for subtract
1b87 : a50d                     lda ad1
1b89 : 6144                     adc (lo adi2-ad2,x) ;perform add
1b8b : 08                       php          
1b8c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1b8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b90 : 68                       pla             ;check flags
1b91 : 2983                     and #$83        ;mask N-----ZC
1b93 : c511                     cmp adrf
                                trap_ne         ;bad flags
1b95 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b97 : 28                       plp
1b98 : 08                       php             ;save carry for next add
1b99 : a50d                     lda ad1
1b9b : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
1b9d : 08                       php          
1b9e : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1ba0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ba2 : 68                       pla             ;check flags
1ba3 : 2983                     and #$83        ;mask N-----ZC
1ba5 : c511                     cmp adrf
                                trap_ne         ;bad flags
1ba7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ba9 : 28                       plp
                        ; decimal ADC / SBC (abs),y
1baa : 08                       php             ;save carry for subtract
1bab : a50d                     lda ad1
1bad : 7156                     adc (adiy2),y   ;perform add
1baf : 08                       php          
1bb0 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1bb2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bb4 : 68                       pla             ;check flags
1bb5 : 2983                     and #$83        ;mask N-----ZC
1bb7 : c511                     cmp adrf
                                trap_ne         ;bad flags
1bb9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bbb : 28                       plp
1bbc : 08                       php             ;save carry for next add
1bbd : a50d                     lda ad1
1bbf : f158                     sbc (sbiy2),y   ;perform subtract
1bc1 : 08                       php          
1bc2 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1bc4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bc6 : 68                       pla             ;check flags
1bc7 : 2983                     and #$83        ;mask N-----ZC
1bc9 : c511                     cmp adrf
                                trap_ne         ;bad flags
1bcb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bcd : 28                       plp
                        ; decimal ADC / SBC (zp)
1bce : 08                       php             ;save carry for subtract
1bcf : a50d                     lda ad1
1bd1 : 7252                     adc (adi2)      ;perform add
1bd3 : 08                       php          
1bd4 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1bd6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bd8 : 68                       pla             ;check flags
1bd9 : 2983                     and #$83        ;mask N-----ZC
1bdb : c511                     cmp adrf
                                trap_ne         ;bad flags
1bdd : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bdf : 28                       plp
1be0 : 08                       php             ;save carry for next add
1be1 : a50d                     lda ad1
1be3 : f254                     sbc (sbi2)      ;perform subtract
1be5 : 08                       php          
1be6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1be8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bea : 68                       pla             ;check flags
1beb : 2983                     and #$83        ;mask N-----ZC
1bed : c511                     cmp adrf
                                trap_ne         ;bad flags
1bef : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bf1 : 28                       plp
1bf2 : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
1bf3 : a511             chkadd  lda adrf        ;add V-flag if overflow
1bf5 : 2983                     and #$83        ;keep N-----ZC / clear V
1bf7 : 48                       pha
1bf8 : a50d                     lda ad1         ;test sign unequal between operands
1bfa : 450e                     eor ad2
1bfc : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
1bfe : a50d                     lda ad1         ;test sign equal between operands and result
1c00 : 450f                     eor adrl
1c02 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
1c04 : 68                       pla
1c05 : 0940                     ora #$40        ;set V
1c07 : 48                       pha
1c08 : 68               ckad1   pla
1c09 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC (zp)
1c0b : 08                       php             ;save carry for subtract
1c0c : a50d                     lda ad1
1c0e : 7252                     adc (adi2)      ;perform add
1c10 : 08                       php          
1c11 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1c13 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c15 : 68                       pla             ;check flags
1c16 : 29c3                     and #$c3        ;mask NV----ZC
1c18 : c511                     cmp adrf
                                trap_ne         ;bad flags
1c1a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c1c : 28                       plp
1c1d : 08                       php             ;save carry for next add
1c1e : a50d                     lda ad1
1c20 : f254                     sbc (sbi2)      ;perform subtract
1c22 : 08                       php          
1c23 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
1c25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c27 : 68                       pla             ;check flags
1c28 : 29c3                     and #$c3        ;mask NV----ZC
1c2a : c511                     cmp adrf
                                trap_ne         ;bad flags
1c2c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c2e : 28                       plp
1c2f : 60                       rts
                                
                        ; target for the jump indirect test
1c30 : 361c             ji_adr  dw test_ji
1c32 : 260c                     dw ji_ret
                        
1c34 : 88                       dey
1c35 : 88                       dey
1c36 :                  test_ji
1c36 : 08                       php             ;either SP or Y count will fail, if we do not hit
1c37 : 88                       dey
1c38 : 88                       dey
1c39 : 88                       dey
1c3a : 28                       plp
                                trap_cs         ;flags loaded?
1c3b : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
1c3d : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
1c3f : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
1c41 : f0fe            >        beq *           ;failed equal (zero)
                        
1c43 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
1c45 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c47 : e04e                     cpx #'N'
                                trap_ne        
1c49 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c4b : c041                     cpy #('D'-3)
                                trap_ne
1c4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c4f : 48                       pha             ;save a,x
1c50 : 8a                       txa
1c51 : 48                       pha
1c52 : ba                       tsx
1c53 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
1c55 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c57 : 68                       pla             ;restore x
1c58 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
1c59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c5b : 48              >            pha         ;use stack to load status
1c5c : 28              >            plp
                        
1c5d : 68                       pla             ;restore a
1c5e : e8                       inx             ;return registers with modifications
1c5f : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
1c61 : 6cff02                   jmp (ji_tab+2)
1c64 : ea                       nop
1c65 : ea                       nop
                                trap            ;runover protection
1c66 : 4c661c          >        jmp *           ;failed anyway
                        
1c69 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump indirect test
1c6c : b31c             jxi_adr dw  trap_ind
1c6e : b31c                     dw  trap_ind
1c70 : 7a1c                     dw  test_jxi    ;+4
1c72 : 720c                     dw  jxi_ret     ;+6
1c74 : b31c                     dw  trap_ind
1c76 : b31c                     dw  trap_ind
                        
1c78 : 88                       dey
1c79 : 88                       dey
1c7a :                  test_jxi
1c7a : 08                       php             ;either SP or Y count will fail, if we do not hit
1c7b : 88                       dey
1c7c : 88                       dey
1c7d : 88                       dey
1c7e : 28                       plp
                                trap_cs         ;flags loaded?
1c7f : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
1c81 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
1c83 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
1c85 : f0fe            >        beq *           ;failed equal (zero)
                        
1c87 : c958                     cmp #'X'        ;registers loaded?
                                trap_ne
1c89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c8b : e004                     cpx #4
                                trap_ne        
1c8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c8f : c046                     cpy #('I'-3)
                                trap_ne
1c91 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c93 : 48                       pha             ;save a,x
1c94 : 8a                       txa
1c95 : 48                       pha
1c96 : ba                       tsx
1c97 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
1c99 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c9b : 68                       pla             ;restore x
1c9c : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
1c9d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c9f : 48              >            pha         ;use stack to load status
1ca0 : 28              >            plp
                        
1ca1 : 68                       pla             ;restore a
1ca2 : e8                       inx             ;return registers with modifications
1ca3 : e8                       inx
1ca4 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
1ca6 : 7cf902                   jmp (jxi_tab,x)
1ca9 : ea                       nop
1caa : ea                       nop
                                trap            ;runover protection
1cab : 4cab1c          >        jmp *           ;failed anyway
                        
1cae : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; JMP (abs,x) with bad x
1cb1 : ea                       nop
1cb2 : ea                       nop
1cb3 :                  trap_ind
1cb3 : ea                       nop
1cb4 : ea                       nop
                                trap            ;near miss indexed indirect jump
1cb5 : 4cb51c          >        jmp *           ;failed anyway
                        
1cb8 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET
1cbb :                  nmi_trap
                                trap            ;check stack for conditions at NMI
1cbb : 4cbb1c          >        jmp *           ;failed anyway
                        
1cbe : 4c0004                   jmp start       ;catastrophic error - cannot continue
1cc1 :                  res_trap
                                trap            ;unexpected RESET
1cc1 : 4cc11c          >        jmp *           ;failed anyway
                        
1cc4 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
1cc7 : 88                       dey
1cc8 : 88                       dey
1cc9 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
1cc9 : 08                       php             ;either SP or Y count will fail, if we do not hit
1cca : 88                       dey
1ccb : 88                       dey
1ccc : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
1ccd : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
1ccf : f042                     beq break2
1cd1 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
1cd3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cd5 : e052                     cpx #'R'
                                trap_ne        
1cd7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cd9 : c048                     cpy #'K'-3
                                trap_ne
1cdb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cdd : 850a                     sta irq_a       ;save registers during break test
1cdf : 860b                     stx irq_x
1ce1 : ba                       tsx             ;test break on stack
1ce2 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
1ce5 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ;possible no break flag on stack
1ce7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ce9 : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
1cea : c934            >            cmp #(intdis |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1cec : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cee : ba                       tsx
1cef : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
1cf1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cf3 : adff01                   lda $1ff        ;propper return on stack
1cf6 : c90c                     cmp #hi(brk_ret0)
                                trap_ne
1cf8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cfa : adfe01                   lda $1fe
1cfd : c9c4                     cmp #lo(brk_ret0)
                                trap_ne
1cff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
1d01 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
1d03 : 48                       pha
1d04 : a60b                     ldx irq_x
1d06 : e8                       inx             ;return registers with modifications
1d07 : a50a                     lda irq_a
1d09 : 49aa                     eor #$aa
1d0b : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
1d0c : 40                       rti
                                trap            ;runover protection
1d0d : 4c0d1d          >        jmp *           ;failed anyway
                        
1d10 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
1d13 :                  break2                  ;BRK pass 2        
1d13 : e0ad                     cpx #$ff-'R'
                                trap_ne        
1d15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d17 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
1d19 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d1b : 850a                     sta irq_a       ;save registers during break test
1d1d : 860b                     stx irq_x
1d1f : ba                       tsx             ;test break on stack
1d20 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
1d23 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ;possibly no break flag on stack
1d25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d27 : 68                       pla
                                cmp_flag $ff-decmode ;actual passed flags should have decmode cleared
1d28 : c9f7            >            cmp #($ff-decmode |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1d2a : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d2c : ba                       tsx
1d2d : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
1d2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d31 : adff01                   lda $1ff        ;propper return on stack
1d34 : c90c                     cmp #hi(brk_ret1)
                                trap_ne
1d36 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1d38 : adfe01                   lda $1fe
1d3b : c9ea                     cmp #lo(brk_ret1)
                                trap_ne
1d3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
1d3f : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
1d41 : 48                       pha      
1d42 : a60b                     ldx irq_x
1d44 : e8                       inx             ;return registers with modifications
1d45 : a50a                     lda irq_a
1d47 : 49aa                     eor #$aa
1d49 : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
1d4a : 40                       rti
                                trap            ;runover protection
1d4b : 4c4b1d          >        jmp *           ;failed anyway
                        
1d4e : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
                            if report = 1
                                include "report.i65"
                            endif
                                    
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry  
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                        ; code at end of image due to the need to add blank space as required
                            if ($ff & (ji_ret - * - 2)) < ($ff & (jxi_ret - * - 2))
                        ; JMP (abs) when $xxff and $xx00 are from same page
                                ds  lo(ji_ret - * - 2)
                                nop
                                nop
                        ji_px   nop             ;low address byte matched with ji_ret 
                                nop
                                trap            ;jmp indirect page cross bug
                        
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
                                ds  lo(jxi_ret - * - 2)
                                nop
                                nop
                        jxi_px  nop             ;low address byte matched with jxi_ret 
                                nop
                                trap            ;jmp indexed indirect page cross bug
                            else
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
1d51 : 00000000000000..         ds  lo(jxi_ret - * - 2)
1d70 : ea                       nop
1d71 : ea                       nop
1d72 : ea               jxi_px  nop             ;low address byte matched with jxi_ret 
1d73 : ea                       nop
                                trap            ;jmp indexed indirect page cross bug
1d74 : 4c741d          >        jmp *           ;failed anyway
                        
                        
                        ; JMP (abs) when $xxff and $xx00 are from same page
1d77 : 00000000000000..         ds  lo(ji_ret - * - 2)
1e24 : ea                       nop
1e25 : ea                       nop
1e26 : ea               ji_px   nop             ;low address byte matched with ji_ret 
1e27 : ea                       nop
                                trap            ;jmp indirect page cross bug
1e28 : 4c281e          >        jmp *           ;failed anyway
                        
                            endif
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
fffa =                          org $fffa       ;vectors
fffa : bb1c                     dw  nmi_trap
fffc : c11c                     dw  res_trap
fffe : c91c                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
